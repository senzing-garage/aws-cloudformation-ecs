AWSTemplateFormatVersion: 2010-09-09

# File format follows https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html
# Tests:
#     Lint: https://github.com/aws-cloudformation/cfn-python-lint
#     Nag: https://github.com/stelligent/cfn_nag
#     aws cloudformation validate-template: https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudformation/validate-template.html

Description: >-
  Senzing aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone Version: 0.7.4
  For more information see https://github.com/Senzing/aws-cloudformation-ecs

# -----------------------------------------------------------------------------
# Metadata
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html
# -----------------------------------------------------------------------------

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Security responsibility
        Parameters:
          - AcknowledgeSecurityResponsibility
      -
        Label:
          default: Senzing installation
        Parameters:
          - AcceptEula
          - SenzingLicenseAsBase64
      -
        Label:
          default: Security
        Parameters:
          - CognitoAdminEmail
          - Route53HostedZoneId
      -
        Label:
          default: 'Optional: Identify existing resources'
        Parameters:
          - VpcId
          - VpcAvailabilityZones
      -
        Label:
          default: 'Optional: Stream-producer'
        Parameters:
          - RunStreamProducer
          - SenzingInputUrl
          - SenzingRecordMin
          - SenzingRecordMax
      -
        Label:
          default: 'Optional: Additional services'
        Parameters:
          - RunApiServer
          - RunJupyter
          - RunRedoer
          - RunSshd
          - RunStreamLoader
          - RunSwagger
          - RunVpcFlowLogs
          - RunWebApp
          - RunXterm
    ParameterLabels:
      AcceptEula:
        default: >-
          Required: If you accept the Senzing End User License Agreement at
          https://senzing.com/end-user-license-agreement,
          enter 'I_ACCEPT_THE_SENZING_EULA'.
      AcknowledgeSecurityResponsibility:
        default: >-
          Required: A default deployment of this template is for public demonstration only.
          Before using authentic PII, ensure the security of your deployment.
          The security of this deployment is your responsibility.
          To acknowledge your understanding and acceptance of the foregoing, type “I AGREE”.
      CidrInbound:
        default: 'Optional: Allowed inbound connections using CIDR notation.'
      CognitoAdminEmail:
        default: 'Required: Email address for initial user.'
      Route53HostedZoneId:
        default: 'Required: Choose a hosted zone.'
      RunApiServer:
        default: 'Optional: Would you like to run Senzing API server?'
      RunJupyter:
        default: 'Optional: Would you like to run Jupyter Notebooks service?'
      RunRedoer:
        default: 'Optional: Would you like to run Senzing Redoer service?'
      RunSshd:
        default: 'Optional: Would you like to run sshd service?'
      RunStreamLoader:
        default: 'Optional: Would you like to run stream-producer service?'
      RunStreamProducer:
        default: 'Optional: Would you like to have sample data imported?'
      RunSwagger:
        default: 'Optional: Would you like to run Swagger service?'
      RunVpcFlowLogs:
        default: 'Optional: Would you like to enable AWS VPC Flow Logs?'
      RunWebApp:
        default: 'Optional: Would you like to run the Senzing WebApp service?'
      RunXterm:
        default: 'Optional: Would you like to run the Senzing XTerm service?'
      SenzingInputUrl:
        default: >-
          Required if running stream-producer job.
          URL to file of JSON records to be sent to AWS SQS queue.
      SenzingLicenseAsBase64:
        default: >-
          Required if inserting more than 100K records.
          Senzing license as base64 encoded string.
      SenzingRecordMax:
        default: >-
          Required if running stream-producer job.
          Last record to read from file of JSON records.
          '0' means read to end of file.
      SenzingRecordMin:
        default: >-
          Required if running stream-producer job.
          First record to read from file of JSON records.
          '0' means start from the beginning.
      VpcAvailabilityZones:
        default: >-
          Required if specifying existing VPC.
          Comma-delimited list of VPC availability zones in which to create subnets.
      VpcId:
        default: >-
          Optional: VPC Id of existing VPC.
          Leave blank to have a new VPC created.

# -----------------------------------------------------------------------------
# Parameters
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
# -----------------------------------------------------------------------------

Parameters:

# AWS Console: https://console.aws.amazon.com/cloudformation/home?#/stacks > {stack} > Parameters

  AcceptEula:
    AllowedPattern: '.+|^I_ACCEPT_THE_SENZING_EULA$'
    ConstraintDescription: AcceptEula parameter must be 'I_ACCEPT_THE_SENZING_EULA'
    Default: '_'
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#accepteula'
    Type: String


  AcknowledgeSecurityResponsibility:
    AllowedPattern: '.+|^I AGREE$'
    ConstraintDescription: AcknowledgeSecurityResponsibility parameter must be 'I AGREE'
    Default: '_'
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#acknowledgeinsecuresystem'
    Type: String


  CidrInbound:
    AllowedPattern: '(?:\d{1,3}\.){3}\d{1,3}(?:/\d\d?)?'
    ConstraintDescription: Inbound CIDR must be in the format n.n.n.n/n
    Default: 0.0.0.0/0
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#cidrinbound'
    Type: String


  CognitoAdminEmail:
    Type: String
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#cognitoadminemail'


  Route53HostedZoneId:
    Default: ''
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#route53hostedzoneid'
    Type: AWS::Route53::HostedZone::Id


  RunApiServer:
    AllowedValues:
      - 'No'
      - 'Yes'
    Default: 'Yes'
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#runapiserver'
    Type: String


  RunJupyter:
    AllowedValues:
      - 'No'
      - 'Yes'
    Default: 'No'
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#runjupyter'
    Type: String


  RunRedoer:
    AllowedValues:
      - 'No'
      - 'Yes'
    Default: 'Yes'
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#runredoer'
    Type: String


  RunSshd:
    AllowedValues:
      - 'No'
      - 'Yes'
    Default: 'Yes'
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#runsshd'
    Type: String


  RunStreamLoader:
    AllowedValues:
      - 'No'
      - 'Yes'
    Default: 'Yes'
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#runstreamloader'
    Type: String


  RunStreamProducer:
    AllowedValues:
      - 'No'
      - 'Yes'
    Default: 'Yes'
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#runstreamproducer'
    Type: String


  RunSwagger:
    AllowedValues:
      - 'No'
      - 'Yes'
    Default: 'Yes'
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#runswagger'
    Type: String


  RunVpcFlowLogs:
    AllowedValues:
      - 'No'
      - 'Yes'
    Default: 'No'
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#runvpcflowlogs'
    Type: String


  RunWebApp:
    AllowedValues:
      - 'No'
      - 'Yes'
    Default: 'Yes'
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#runwebapp'
    Type: String


  RunXterm:
    AllowedValues:
      - 'No'
      - 'Yes'
    Default: 'Yes'
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#xterm'
    Type: String


  SenzingInputUrl:
    Default: https://s3.amazonaws.com/public-read-access/TestDataSets/SenzingTruthSet/truth-set.json
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#senzinginputurl'
    Type: String


  SenzingLicenseAsBase64:
#   AllowedPattern: ' ^$|[^-A-Za-z0-9+\/=\s]|=[^=]|={3,}$'
    ConstraintDescription: 'Must contain only Base64 characters. see https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-full-stack#senzinglicenseasbase64'
    Default: ' '
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#senzinglicenseasbase64'
    Type: String


  SenzingRecordMax:
    Default: 0
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#senzingrecordmax'
    Type: Number


  SenzingRecordMin:
    Default: 0
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#senzingrecordmin'
    Type: Number


  VpcAvailabilityZones:
    Default: ''
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#vpcavailabilityzones'
    Type: CommaDelimitedList


  VpcId:
    AllowedPattern: '^(?:vpc-[0-9a-f]{8}|vpc-[0-9a-f]{17}|)$'
    ConstraintDescription: >-
      VPC Id must begin with 'vpc-' followed by either an 8 or 17 character
      identifier, or leave blank to have a new VPC created
    Default: ''
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#vpcid'
    Type: String

# -----------------------------------------------------------------------------
# Rules
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/rules-section-structure.html
# -----------------------------------------------------------------------------

Rules:

  ConfirmEula:
    Assertions:
      - Assert: !Not
          - !Equals
            - !Ref AcceptEula
            - ''
        AssertDescription: 'EULA needs to be accepted.  Enter "I_ACCEPT_THE_SENZING_EULA"'
      - Assert: !Equals
          - !Ref AcceptEula
          - I_ACCEPT_THE_SENZING_EULA
        AssertDescription: 'EULA acceptance incorrect.  Enter "I_ACCEPT_THE_SENZING_EULA"'


  ConfirmAcknowledgeSecurityResponsibility:
    Assertions:
      - Assert: !Equals
          - !Ref AcknowledgeSecurityResponsibility
          - 'I AGREE'
        AssertDescription: 'Entering "I AGREE" is required to proceed.'

# -----------------------------------------------------------------------------
# Mappings
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/mappings-section-structure.html
# -----------------------------------------------------------------------------

Mappings:

  Constants:
    Database:
      Name: G2
      Username: senzing
    Senzing:
      Version: senzingapi-2.5.0-21104
    Stack:
      Name: full-stack
    StreamProducer:
      DataSource: TEST
      EntityType: GENERIC
      InputUrl: https://s3.amazonaws.com/public-read-access/TestDataSets/SenzingTruthSet/truth-set.json
      RecordMax: 0
      RecordMin: 0


  VpcCidrs:
    vpc:
      cidr: 10.0.0.0/16
    pubsubnet1:
      cidr: 10.0.1.0/24
    pubsubnet2:
      cidr: 10.0.2.0/24
    privsubnet1:
      cidr: 10.0.3.0/24
    privsubnet2:
      cidr: 10.0.4.0/24

# -----------------------------------------------------------------------------
# Conditions
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/conditions-section-structure.html
# -----------------------------------------------------------------------------

Conditions:

  IfCreateVpcResources: !Equals
    - !Ref VpcId
    - ''

  IfRunApiServer: !Equals
    - !Ref RunApiServer
    - 'Yes'

  IfRunJupyter: !Equals
    - !Ref RunJupyter
    - 'Yes'

  IfRunRedoer: !Equals
    - !Ref RunRedoer
    - 'Yes'

  IfRunSshd: !Equals
    - !Ref RunSshd
    - 'Yes'

  IfRunStreamLoader: !Equals
    - !Ref RunStreamLoader
    - 'Yes'

  IfRunStreamProducer: !Equals
    - !Ref RunStreamProducer
    - 'Yes'

  IfRunSwagger: !Equals
    - !Ref RunSwagger
    - 'Yes'

  IfRunVpcFlowLogs: !Equals
    - !Ref RunVpcFlowLogs
    - 'Yes'

  IfRunWebApp: !Equals
    - !Ref RunWebApp
    - 'Yes'

  IfRunXterm: !Equals
    - !Ref RunXterm
    - 'Yes'

  IfUseSpecifiedVpcAvailabilityZones: !Not
    - !Equals
      - !Join
        - ''
        - !Ref VpcAvailabilityZones
      - ''

# -----------------------------------------------------------------------------
# Resources
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
# -----------------------------------------------------------------------------

Resources:

# -- Ssm -----------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-parameter.html
# AWS Console: https://console.aws.amazon.com/systems-manager/parameters > Search for {stack}

  SsmParameterSenzingEngineConfigurationJson:
    Properties:
      Name: !Sub "${AWS::StackName}-ssm-parameter-senzing-engine-configuration-json"
      Type: String
      Value: !Sub
        - >-
          {
              "PIPELINE": {
                  "CONFIGPATH": "/etc/opt/senzing",
                  "RESOURCEPATH": "/opt/senzing/g2/resources",
                  "SUPPORTPATH": "/opt/senzing/data"
              },
              "SQL": {
                  "BACKEND": "HYBRID",
                  "CONNECTION":"postgresql://${DatabaseUsername}:${DatabasePassword}@${DatabaseHostCore}:${DatabasePortCore}:${DatabaseName}"
              },
              "C1": {
                  "CLUSTER_SIZE": "1",
                  "DB_1": "postgresql://${DatabaseUsername}:${DatabasePassword}@${DatabaseHostRes}:${DatabasePortRes}:${DatabaseName}"
              },
              "C2": {
                  "CLUSTER_SIZE": "1",
                  "DB_1": "postgresql://${DatabaseUsername}:${DatabasePassword}@${DatabaseHostLibfeat}:${DatabasePortLibfeat}:${DatabaseName}"
              },
              "HYBRID": {
                  "LIB_FEAT": "C2",
                  "LIB_FEAT_HKEY": "C2",
                  "RES_FEAT": "C1",
                  "RES_FEAT_EKEY": "C1",
                  "RES_FEAT_LKEY": "C1",
                  "RES_FEAT_STAT": "C1"
              }
          }
        - DatabaseHostLibfeat: !GetAtt RdsDbClusterLibfeat.Endpoint.Address
          DatabaseHostCore: !GetAtt RdsDbClusterCore.Endpoint.Address
          DatabaseHostRes: !GetAtt RdsDbClusterRes.Endpoint.Address
          DatabaseName: !FindInMap [Constants, Database, Name]
          DatabasePassword: !GetAtt LambdaRunnerDbPassword.RandomString
          DatabasePortLibfeat: !GetAtt RdsDbClusterLibfeat.Endpoint.Port
          DatabasePortCore: !GetAtt RdsDbClusterCore.Endpoint.Port
          DatabasePortRes: !GetAtt RdsDbClusterRes.Endpoint.Port
          DatabaseUsername: !FindInMap [Constants, Database, Username]
    Type: AWS::SSM::Parameter

# -- Iam -----------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
# AWS Console: https://console.aws.amazon.com/iam/home?#/roles > Search for {stack}

  IamRoleApiServer:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-api-server"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-api-server"
    Type: AWS::IAM::Role


  IamRoleDebug:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-debug"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-debug"
    Type: AWS::IAM::Role


  IamRoleFlowLog:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-flow-log"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-flow-log"
    Type: AWS::IAM::Role


  IamRoleG2ConfigTool:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-g2configtool"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-g2configtool"
    Type: AWS::IAM::Role


  IamRoleInitEfs:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-init-efs"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-init-efs"
    Type: AWS::IAM::Role


  IamRoleInitPostgres:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-init-postgres"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-init-postgres"
    Type: AWS::IAM::Role


  IamRoleInitSenzing:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-init-senzing"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-init-senzing"
    Type: AWS::IAM::Role


  IamRoleInstallSenzing:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-install-senzing"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-install-senzing"
    Type: AWS::IAM::Role


  IamRoleJupyter:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-jupyter"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-jupyter"
    Type: AWS::IAM::Role


  IamRoleLambda:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
                - lambda.amazonaws.com
                - route53.amazonaws.com
                - sqs.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-lambda"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-lambda"
    Type: AWS::IAM::Role


  IamRoleRedoer:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-redoer"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-redoer"
    Type: AWS::IAM::Role


  IamRoleSshd:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-sshd"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-sshd"
    Type: AWS::IAM::Role


  IamRoleStreamLoader:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
                - sqs.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-stream-loader"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-stream-loader"
    Type: AWS::IAM::Role


  IamRoleStreamProducer:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
                - sqs.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-stream-producer"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-stream-producer"
    Type: AWS::IAM::Role


  IamRoleSwagger:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
                - route53.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-swagger"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-swagger"
    Type: AWS::IAM::Role


  IamRoleWebApp:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-web-app"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-web-app"
    Type: AWS::IAM::Role


  IamRoleXterm:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
                - route53.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-xterm"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-xterm"
    Type: AWS::IAM::Role

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html
# AWS Console: https://console.aws.amazon.com/iam/home?#/roles > Search for {stack} > {role} > inline policy

  IamPolicyCertificateManager:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-certificate-manager"
      PolicyDocument:
        Statement:
          -
            Action:
              - acm:ListCertificates
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleLambda
       - !Ref IamRoleSwagger
       - !Ref IamRoleXterm
    Type: AWS::IAM::Policy


  IamPolicyCognito:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-cognito"
      PolicyDocument:
        Statement:
          -
            Action:
              - cognito-idp:AdminCreateUser
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleLambda
       - !Ref IamRoleSwagger
       - !Ref IamRoleXterm
    Type: AWS::IAM::Policy


  IamPolicyEc2FlowLogs:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-logging-create-group"
      PolicyDocument:
        Statement:
          -
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleFlowLog
    Type: AWS::IAM::Policy


  IamPolicyEfs:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-lambda"
      PolicyDocument:
        Statement:
          -
            Action:
              - elasticfilesystem:DescribeMountTargets
            Effect: Allow
            Resource:
              - !GetAtt EfsFileSystem.Arn
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleLambda
    Type: AWS::IAM::Policy


  IamPolicyLoggingCreateStream:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-logging-create-stream"
      PolicyDocument:
        Statement:
          -
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleApiServer
       - !Ref IamRoleFlowLog
       - !Ref IamRoleG2ConfigTool
       - !Ref IamRoleInitEfs
       - !Ref IamRoleInitPostgres
       - !Ref IamRoleInitSenzing
       - !Ref IamRoleInstallSenzing
       - !Ref IamRoleJupyter
       - !Ref IamRoleLambda
       - !Ref IamRoleRedoer
       - !Ref IamRoleSshd
       - !Ref IamRoleStreamLoader
       - !Ref IamRoleStreamProducer
       - !Ref IamRoleSwagger
       - !Ref IamRoleWebApp
       - !Ref IamRoleXterm
    Type: AWS::IAM::Policy


  IamPolicyPassRole:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-pass-role"
      PolicyDocument:
        Statement:
          -
            Action:
              - iam:PassRole
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleFlowLog
       - !Ref IamRoleG2ConfigTool
       - !Ref IamRoleInitEfs
       - !Ref IamRoleLambda
       - !Ref IamRoleStreamProducer
    Type: AWS::IAM::Policy


  IamPolicyRoute53:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-route53"
      PolicyDocument:
        Statement:
          -
            Action:
              - route53:GetHostedZone
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleLambda
       - !Ref IamRoleSwagger
       - !Ref IamRoleXterm
    Type: AWS::IAM::Policy


  IamPolicySqsConsumer:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-sqs-consumer"
      PolicyDocument:
        Statement:
          -
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
            Effect: Allow
            Resource:
              - !GetAtt SqsDeadLetter.Arn
              - !GetAtt SqsInput.Arn
              - !GetAtt SqsOutput.Arn
              - !GetAtt SqsRedoerInput.Arn
              - !GetAtt SqsRedoerOutput.Arn
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleRedoer
       - !Ref IamRoleStreamLoader
    Type: AWS::IAM::Policy


  IamPolicySqsProducer:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-sqs-producer"
      PolicyDocument:
        Statement:
          -
            Action:
              - sqs:SendMessage
            Effect: Allow
            Resource:
              - !GetAtt SqsDeadLetter.Arn
              - !GetAtt SqsInput.Arn
              - !GetAtt SqsOutput.Arn
              - !GetAtt SqsRedoerInput.Arn
              - !GetAtt SqsRedoerOutput.Arn
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleRedoer
       - !Ref IamRoleStreamLoader
       - !Ref IamRoleStreamProducer
    Type: AWS::IAM::Policy


  IamPolicyTaskRunner:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-task-runner"
      PolicyDocument:
        Statement:
          -
            Action:
              - ecs:DescribeTasks
              - ecs:RunTask
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleApiServer
       - !Ref IamRoleG2ConfigTool
       - !Ref IamRoleJupyter
       - !Ref IamRoleLambda
       - !Ref IamRoleRedoer
       - !Ref IamRoleSshd
       - !Ref IamRoleStreamLoader
       - !Ref IamRoleSwagger
       - !Ref IamRoleWebApp
       - !Ref IamRoleXterm
    Type: AWS::IAM::Policy

# -- Logging ------------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html
# AWS Console: https://console.aws.amazon.com/cloudwatch/home?#logsV2:log-groups > Search for {stack}

  LogsLogGroupDbClusterCore:
    Properties:
      LogGroupName: !Sub
        - "/aws/rds/cluster/${StackNameAsLower}-aurora-senzing-cluster-core/postgresql"
        - StackNameAsLower: !GetAtt LambdaRunnerStackNameAsLower.OutputString
    Type: AWS::Logs::LogGroup


  LogsLogGroupDbClusterLibfeat:
    Properties:
      LogGroupName: !Sub
        - "/aws/rds/cluster/${StackNameAsLower}-aurora-senzing-cluster-libfeat/postgresql"
        - StackNameAsLower: !GetAtt LambdaRunnerStackNameAsLower.OutputString
    Type: AWS::Logs::LogGroup


  LogsLogGroupDbClusterRes:
    Properties:
      LogGroupName: !Sub
        - "/aws/rds/cluster/${StackNameAsLower}-aurora-senzing-cluster-res/postgresql"
        - StackNameAsLower: !GetAtt LambdaRunnerStackNameAsLower.OutputString
    Type: AWS::Logs::LogGroup


  LogsLogGroupLambdaCognitoCreateUser:
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-lambda-cognito-create-user"
    Type: AWS::Logs::LogGroup


  LogsLogGroupLambdaFindDomainName:
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-lambda-find-domain-name"
    Type: AWS::Logs::LogGroup


  LogsLogGroupLambdaRandomString:
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-lambda-random-string"
    Type: AWS::Logs::LogGroup


  LogsLogGroupLambdaRunTask:
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-lambda-run-task"
    Type: AWS::Logs::LogGroup


  LogsLogGroupLambdaRunTaskAndWait:
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-lambda-run-task-and-wait"
    Type: AWS::Logs::LogGroup


  LogsLogGroupLambdaStringToLower:
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-lambda-string-to-lower"
    Type: AWS::Logs::LogGroup


  LogsLogGroupLambdaWaitForEfs:
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-lambda-wait-for-efs"
    Type: AWS::Logs::LogGroup


  LogsLogGroupMain:
    Properties:
      LogGroupName: !Sub
        - "/senzing/${StackName}/${AWS::StackName}"
        - StackName: !FindInMap [Constants, Stack, Name]
    Type: AWS::Logs::LogGroup

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-flowlog.html
# https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs-cwl.html

  Ec2FlowLog:
    Condition: IfRunVpcFlowLogs
    Properties:
      DeliverLogsPermissionArn: !GetAtt IamRoleFlowLog.Arn
      LogGroupName: !Ref LogsLogGroupMain
      ResourceId: !If
        - IfCreateVpcResources
        - !Ref Ec2Vpc
        - !Ref VpcId
      ResourceType: VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-flow-log"
      TrafficType: ALL
    Type: AWS::EC2::FlowLog

# -- Cloud, subnets, routing --------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html
# AWS Console: https://console.aws.amazon.com/vpc/home?#vpcs > Search for {stack}

  Ec2Vpc:
    Condition: IfCreateVpcResources
    Properties:
      CidrBlock: !FindInMap
        - VpcCidrs
        - vpc
        - cidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-vpc"
    Type: AWS::EC2::VPC

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
# AWS Console: https://console.aws.amazon.com/vpc/home?#subnets > Search for {stack}

  Ec2SubnetPrivate1:
    Properties:
      AvailabilityZone: !Select
          - '0'
          - !GetAZs
            Ref: AWS::Region
      CidrBlock: !FindInMap
        - VpcCidrs
        - privsubnet1
        - cidr
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-subnet-private-1"
      VpcId: !If
        - IfCreateVpcResources
        - !Ref Ec2Vpc
        - !Ref VpcId
    Type: AWS::EC2::Subnet


  Ec2SubnetPrivate2:
    Properties:
      AvailabilityZone: !Select
          - '1'
          - !GetAZs
            Ref: AWS::Region
      CidrBlock: !FindInMap
        - VpcCidrs
        - privsubnet2
        - cidr
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-subnet-private-2"
      VpcId: !If
        - IfCreateVpcResources
        - !Ref Ec2Vpc
        - !Ref VpcId
    Type: AWS::EC2::Subnet


  Ec2SubnetPublic1:
    Properties:
      AvailabilityZone: !If
        - IfUseSpecifiedVpcAvailabilityZones
        - !Select
          - '0'
          - !Ref VpcAvailabilityZones
        - !Select
          - '0'
          - !GetAZs
            Ref: AWS::Region
      CidrBlock: !FindInMap
        - VpcCidrs
        - pubsubnet1
        - cidr
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-subnet-public-1"
      VpcId: !If
        - IfCreateVpcResources
        - !Ref Ec2Vpc
        - !Ref VpcId
    Type: AWS::EC2::Subnet


  Ec2SubnetPublic2:
    Properties:
      AvailabilityZone: !If
        - IfUseSpecifiedVpcAvailabilityZones
        - !Select
          - '1'
          - !Ref VpcAvailabilityZones
        - !Select
          - '1'
          - !GetAZs
            Ref: AWS::Region
      CidrBlock: !FindInMap
        - VpcCidrs
        - pubsubnet2
        - cidr
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-subnet-public-2"
      VpcId: !If
        - IfCreateVpcResources
        - !Ref Ec2Vpc
        - !Ref VpcId
    Type: AWS::EC2::Subnet

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-eip.html
# AWS Console: https://console.aws.amazon.com/vpc/home?#Addresses: > Search for {stack}

  Ec2Eip:
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-eip"
    Type: AWS::EC2::EIP

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html
# AWS Console: https://console.aws.amazon.com/vpc/home?#NatGateways: > Search for {stack}

  Ec2NatGateway:
    Properties:
      AllocationId: !GetAtt Ec2Eip.AllocationId
      SubnetId: !Ref Ec2SubnetPublic1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-nat-gateway"
    Type: AWS::EC2::NatGateway

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
# AWS Console: https://console.aws.amazon.com/vpc/home?#SecurityGroups > Search for {stack}

  Ec2SecurityGroupInternal:
    Properties:
      GroupDescription: !Sub "${AWS::StackName} - ECS internal open ports."
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          Description: All
          IpProtocol: '-1'
      SecurityGroupIngress:
        -
          CidrIp: !FindInMap
            - VpcCidrs
            - vpc
            - cidr
          Description: SSH
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        -
          CidrIp: !FindInMap
            - VpcCidrs
            - vpc
            - cidr
          Description: HTTP
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        -
          CidrIp: !FindInMap
            - VpcCidrs
            - vpc
            - cidr
          Description: HTTPS
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        -
          CidrIp: !FindInMap
            - VpcCidrs
            - vpc
            - cidr
          Description: NFS
          FromPort: 2049
          IpProtocol: tcp
          ToPort: 2049
        -
          CidrIp: !FindInMap
            - VpcCidrs
            - vpc
            - cidr
          Description: Senzing X-Term
          FromPort: 5000
          IpProtocol: tcp
          ToPort: 5000
        -
          CidrIp: !FindInMap
            - VpcCidrs
            - vpc
            - cidr
          Description: PostgreSQL
          FromPort: 5432
          IpProtocol: tcp
          ToPort: 5432
        -
          CidrIp: !FindInMap
            - VpcCidrs
            - vpc
            - cidr
          Description: Senzing API server
          FromPort: 8250
          IpProtocol: tcp
          ToPort: 8250
        -
          CidrIp: !FindInMap
            - VpcCidrs
            - vpc
            - cidr
          Description: Senzing Web App
          FromPort: 8251
          IpProtocol: tcp
          ToPort: 8251
        -
          CidrIp: !FindInMap
            - VpcCidrs
            - vpc
            - cidr
          Description: Swagger UI
          FromPort: 8080
          IpProtocol: tcp
          ToPort: 8080
        -
          CidrIp: !FindInMap
            - VpcCidrs
            - vpc
            - cidr
          Description: Senzing Jupyter notebooks
          FromPort: 8888
          IpProtocol: tcp
          ToPort: 8888
        -
          CidrIp: !FindInMap
            - VpcCidrs
            - vpc
            - cidr
          Description: phpPgAdmin
          FromPort: 9171
          IpProtocol: tcp
          ToPort: 9171
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-security-group-internal"
      VpcId: !If
        - IfCreateVpcResources
        - !Ref Ec2Vpc
        - !Ref VpcId
    Type: AWS::EC2::SecurityGroup


  Ec2SecurityGroupLambdaRunner:
    Properties:
      GroupDescription: !Sub "${AWS::StackName} - Lambda open ports."
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          Description: All
          IpProtocol: '-1'
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-security-group-lambda-runner"
      VpcId: !If
        - IfCreateVpcResources
        - !Ref Ec2Vpc
        - !Ref VpcId
    Type: AWS::EC2::SecurityGroup


  Ec2SecurityGroupLoadBalancerPrivate:
    Properties:
      GroupDescription: !Sub "${AWS::StackName} - Private load balancer open ports."
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          Description: All
          IpProtocol: '-1'
      SecurityGroupIngress:
        -
          CidrIp: !FindInMap
            - VpcCidrs
            - vpc
            - cidr
          Description: Senzing API server
          FromPort: 8250
          IpProtocol: tcp
          ToPort: 8250
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-security-group-alb-private"
      VpcId: !If
        - IfCreateVpcResources
        - !Ref Ec2Vpc
        - !Ref VpcId
    Type: AWS::EC2::SecurityGroup


  Ec2SecurityGroupLoadBalancerPublic:
    Properties:
      GroupDescription: !Sub "${AWS::StackName} - Public load balancer open ports."
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          Description: All
          IpProtocol: '-1'
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-security-group-alb-public"
      VpcId: !If
        - IfCreateVpcResources
        - !Ref Ec2Vpc
        - !Ref VpcId
    Type: AWS::EC2::SecurityGroup


  Ec2SecurityGroupSshd:
    Properties:
      GroupDescription: !Sub "${AWS::StackName} - SSHD service open ports."
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          Description: All
          IpProtocol: '-1'
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-security-group-sshd"
      VpcId: !If
        - IfCreateVpcResources
        - !Ref Ec2Vpc
        - !Ref VpcId
    Type: AWS::EC2::SecurityGroup

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group-ingress.html
# AWS Console: https://console.aws.amazon.com/vpc/home?#SecurityGroups: > Search for {stack}-ec2-security-group-alb-public > Inbound rules

  Ec2SecurityGroupIngressApiServerPublic:
    Condition: IfRunApiServer
    Properties:
      Description: Allow Health Check on Container 8250 from ALB
      FromPort: 8250
      GroupId: !Ref Ec2SecurityGroupLoadBalancerPublic
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt Ec2SecurityGroupLoadBalancerPublic.GroupId
      ToPort: 8250
    Type: AWS::EC2::SecurityGroupIngress


  Ec2SecurityGroupIngressHttps:
    Properties:
      CidrIp: !Ref CidrInbound
      Description: HTTPS
      FromPort: 443
      GroupId: !Ref Ec2SecurityGroupLoadBalancerPublic
      IpProtocol: tcp
      ToPort: 443
    Type: AWS::EC2::SecurityGroupIngress


  Ec2SecurityGroupIngressJupyter:
    Condition: IfRunJupyter
    Properties:
      Description: Allow Health Check on Container 8888 from ALB
      FromPort: 8888
      GroupId: !Ref Ec2SecurityGroupLoadBalancerPublic
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt Ec2SecurityGroupLoadBalancerPublic.GroupId
      ToPort: 8888
    Type: AWS::EC2::SecurityGroupIngress


  Ec2SecurityGroupIngressSsh:
    Condition: IfRunSshd
    Properties:
      CidrIp: !Ref CidrInbound
      Description: SSH
      FromPort: 22
      GroupId: !Ref Ec2SecurityGroupSshd
      IpProtocol: tcp
      ToPort: 22
    Type: AWS::EC2::SecurityGroupIngress


  Ec2SecurityGroupIngressSwagger:
    Condition: IfRunSwagger
    Properties:
      Description: Allow Health Check on Container 8080 from ALB
      FromPort: 8080
      GroupId: !Ref Ec2SecurityGroupLoadBalancerPublic
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt Ec2SecurityGroupLoadBalancerPublic.GroupId
      ToPort: 8080
    Type: AWS::EC2::SecurityGroupIngress


  Ec2SecurityGroupIngressWebApp:
    Condition: IfRunWebApp
    Properties:
      Description: Allow Health Check on Container 8251 from ALB
      FromPort: 8251
      GroupId: !Ref Ec2SecurityGroupLoadBalancerPublic
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt Ec2SecurityGroupLoadBalancerPublic.GroupId
      ToPort: 8251
    Type: AWS::EC2::SecurityGroupIngress


  Ec2SecurityGroupIngressXterm:
    Condition: IfRunXterm
    Properties:
      Description: Allow Health Check on Container 5000 from ALB
      FromPort: 5000
      GroupId: !Ref Ec2SecurityGroupLoadBalancerPublic
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt Ec2SecurityGroupLoadBalancerPublic.GroupId
      ToPort: 5000
    Type: AWS::EC2::SecurityGroupIngress

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-internetgateway.html
# AWS Console: https://console.aws.amazon.com/vpc/home?#igws > Search for {stack}

  Ec2InternetGateway:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-internet-gateway"
    Type: AWS::EC2::InternetGateway

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc-gateway-attachment.html
# AWS Console: https://console.aws.amazon.com/vpc/home?#igws > Search for {stack} > State & VPI ID

  Ec2VpcGatewayAttachment:
    Properties:
      InternetGatewayId: !Ref Ec2InternetGateway
      VpcId: !If
        - IfCreateVpcResources
        - !Ref Ec2Vpc
        - !Ref VpcId
    Type: AWS::EC2::VPCGatewayAttachment

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
# AWS Console: https://console.aws.amazon.com/vpc/home?#RouteTables > Search for {stack}

  Ec2RouteTablePrivate:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-route-table-private"
      VpcId: !If
        - IfCreateVpcResources
        - !Ref Ec2Vpc
        - !Ref VpcId
    Type: AWS::EC2::RouteTable


  Ec2RouteTablePublic:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-route-table-public"
      VpcId: !If
        - IfCreateVpcResources
        - !Ref Ec2Vpc
        - !Ref VpcId
    Type: AWS::EC2::RouteTable

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html
# AWS Console: https://console.aws.amazon.com/vpc/home?#RouteTables > {name} > "Routes" tab

  Ec2RoutePrivate:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref Ec2NatGateway
      RouteTableId: !Ref Ec2RouteTablePrivate
    Type: AWS::EC2::Route


  Ec2RoutePublic:
    DependsOn:
     - Ec2VpcGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Ec2InternetGateway
      RouteTableId: !Ref Ec2RouteTablePublic
    Type: AWS::EC2::Route

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-route-table-assoc.html
# AWS Console: https://console.aws.amazon.com/vpc/home?#RouteTables > {name} > "Subnet Associations" tab

  Ec2SubnetRouteTableAssociationPrivate1:
    Properties:
      RouteTableId: !Ref Ec2RouteTablePrivate
      SubnetId: !Ref Ec2SubnetPrivate1
    Type: AWS::EC2::SubnetRouteTableAssociation


  Ec2SubnetRouteTableAssociationPrivate2:
    Properties:
      RouteTableId: !Ref Ec2RouteTablePrivate
      SubnetId: !Ref Ec2SubnetPrivate2
    Type: AWS::EC2::SubnetRouteTableAssociation


  Ec2SubnetRouteTableAssociationPublic1:
    Properties:
      RouteTableId: !Ref Ec2RouteTablePublic
      SubnetId: !Ref Ec2SubnetPublic1
    Type: AWS::EC2::SubnetRouteTableAssociation


  Ec2SubnetRouteTableAssociationPublic2:
    Properties:
      RouteTableId: !Ref Ec2RouteTablePublic
      SubnetId: !Ref Ec2SubnetPublic2
    Type: AWS::EC2::SubnetRouteTableAssociation

# -- Elastic File System ------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html
# AWS Console: https://console.aws.amazon.com/efs/home?#/filesystems > Search for {stack}

  EfsFileSystem:
    Properties:
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-efs-filesystem"
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
    Type: AWS::EFS::FileSystem

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html
# AWS Console: https://console.aws.amazon.com/efs/home?#/filesystems > {name} > "Network" tab

  EfsMountTarget1:
    Properties:
      FileSystemId:
        Ref: EfsFileSystem
      SecurityGroups:
        - Ref: Ec2SecurityGroupInternal
      SubnetId:
        Ref: Ec2SubnetPrivate1
    Type: AWS::EFS::MountTarget


  EfsMountTarget2:
    Properties:
      FileSystemId:
        Ref: EfsFileSystem
      SecurityGroups:
        - Ref: Ec2SecurityGroupInternal
      SubnetId:
        Ref: Ec2SubnetPrivate2
    Type: AWS::EFS::MountTarget

# -- Database -----------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbsubnet-group.html
# AWS Console: https://console.aws.amazon.com/rds/home#db-subnet-groups-list: > Search for {stack}

  RdsDbSubnetGroup:
    Properties:
      DBSubnetGroupDescription: !Sub "${AWS::StackName}-db-subnet-description"
      DBSubnetGroupName: !Sub "${AWS::StackName}-db-subnet"
      SubnetIds:
        - !Ref Ec2SubnetPrivate1
        - !Ref Ec2SubnetPrivate2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-rds-db-subnet-group"
    Type: AWS::RDS::DBSubnetGroup

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbclusterparametergroup.html
# AWS Console: https://console.aws.amazon.com/rds/home?#parameter-groups: > Search for {stack}

  RdsDbClusterParameterGroup:
    Properties:
      Description: !Sub "${AWS::StackName}-rds-db-cluster-parameter-group-description"
      Family: aurora-postgresql10
      Parameters:
        'synchronous_commit': 'off'
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-rds-db-cluster-parameter-group"
    Type: AWS::RDS::DBClusterParameterGroup

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbcluster.html
# AWS Console: https://console.aws.amazon.com/rds/home?#databases: > Search for {stack}

  RdsDbClusterCore:
    DependsOn:
     - LogsLogGroupDbClusterCore
     - RdsDbSubnetGroup
    Properties:
      AvailabilityZones:
        - !GetAtt Ec2SubnetPrivate1.AvailabilityZone
        - !GetAtt Ec2SubnetPrivate2.AvailabilityZone
      DatabaseName: G2
      DBClusterIdentifier: !Sub "${AWS::StackName}-aurora-senzing-cluster-core"
      DBClusterParameterGroupName:
        Ref: RdsDbClusterParameterGroup
      # FIXME: Tricky code.  See https://console.aws.amazon.com/support/home#/case/?displayId=7725760511
      DBSubnetGroupName: !Sub
        - "${StackNameAsLower}-db-subnet"
        - StackNameAsLower: !GetAtt LambdaRunnerStackNameAsLower.OutputString
      DeletionProtection: false
      EnableHttpEndpoint: true
      Engine: aurora-postgresql
      EngineMode: serverless
      EngineVersion: '10.12'
      MasterUsername: !FindInMap [Constants, Database, Username]
      MasterUserPassword: !GetAtt LambdaRunnerDbPassword.RandomString
      ScalingConfiguration:
        AutoPause: true
        MaxCapacity: 192
        MinCapacity: 2
        SecondsUntilAutoPause: 3600
#       FIXME:  Uncomment once 'TimeoutAction' is supported.
#       https://github.com/aws-cloudformation/aws-cloudformation-coverage-roadmap/issues/298
#       https://console.aws.amazon.com/support/home#/case/?displayId=7705681311&language=en
#       TimeoutAction: ForceApplyCapacityChange
      StorageEncrypted: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-rds-db-cluster-core"
      VpcSecurityGroupIds:
        - !Ref Ec2SecurityGroupInternal
    Type: AWS::RDS::DBCluster


  RdsDbClusterLibfeat:
    DependsOn:
     - LogsLogGroupDbClusterLibfeat
     - RdsDbSubnetGroup
    Properties:
      AvailabilityZones:
        - !GetAtt Ec2SubnetPrivate1.AvailabilityZone
        - !GetAtt Ec2SubnetPrivate2.AvailabilityZone
      DatabaseName: G2
      DBClusterIdentifier: !Sub "${AWS::StackName}-aurora-senzing-cluster-libfeat"
      DBClusterParameterGroupName:
        Ref: RdsDbClusterParameterGroup
      # FIXME: Tricky code.  See https://console.aws.amazon.com/support/home#/case/?displayId=7725760511
      DBSubnetGroupName: !Sub
        - "${StackNameAsLower}-db-subnet"
        - StackNameAsLower: !GetAtt LambdaRunnerStackNameAsLower.OutputString
      DeletionProtection: false
      EnableHttpEndpoint: true
      Engine: aurora-postgresql
      EngineMode: serverless
      EngineVersion: '10.12'
      MasterUsername: !FindInMap [Constants, Database, Username]
      MasterUserPassword: !GetAtt LambdaRunnerDbPassword.RandomString
      ScalingConfiguration:
        AutoPause: true
        MaxCapacity: 192
        MinCapacity: 2
        SecondsUntilAutoPause: 3600
#       FIXME:  Uncomment once 'TimeoutAction' is supported.
#       https://github.com/aws-cloudformation/aws-cloudformation-coverage-roadmap/issues/298
#       https://console.aws.amazon.com/support/home#/case/?displayId=7705681311&language=en
#       TimeoutAction: ForceApplyCapacityChange
      StorageEncrypted: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-rds-db-cluster-libfeat"
      VpcSecurityGroupIds:
        - !Ref Ec2SecurityGroupInternal
    Type: AWS::RDS::DBCluster


  RdsDbClusterRes:
    DependsOn:
     - LogsLogGroupDbClusterRes
     - RdsDbSubnetGroup
    Properties:
      AvailabilityZones:
        - !GetAtt Ec2SubnetPrivate1.AvailabilityZone
        - !GetAtt Ec2SubnetPrivate2.AvailabilityZone
      DatabaseName: G2
      DBClusterIdentifier: !Sub "${AWS::StackName}-aurora-senzing-cluster-res"
      DBClusterParameterGroupName:
        Ref: RdsDbClusterParameterGroup
      # FIXME: Tricky code.  See https://console.aws.amazon.com/support/home#/case/?displayId=7725760511
      DBSubnetGroupName: !Sub
        - "${StackNameAsLower}-db-subnet"
        - StackNameAsLower: !GetAtt LambdaRunnerStackNameAsLower.OutputString
      DeletionProtection: false
      EnableHttpEndpoint: true
      Engine: aurora-postgresql
      EngineMode: serverless
      EngineVersion: '10.12'
      MasterUsername: !FindInMap [Constants, Database, Username]
      MasterUserPassword: !GetAtt LambdaRunnerDbPassword.RandomString
      ScalingConfiguration:
        AutoPause: true
        MaxCapacity: 192
        MinCapacity: 2
        SecondsUntilAutoPause: 3600
#       FIXME:  Uncomment once 'TimeoutAction' is supported.
#       https://github.com/aws-cloudformation/aws-cloudformation-coverage-roadmap/issues/298
#       https://console.aws.amazon.com/support/home#/case/?displayId=7705681311&language=en
#       TimeoutAction: ForceApplyCapacityChange
      StorageEncrypted: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-rds-db-cluster-res"
      VpcSecurityGroupIds:
        - !Ref Ec2SecurityGroupInternal
    Type: AWS::RDS::DBCluster

# -- Queue --------------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sqs-queues.html
# AWS Console: https://console.aws.amazon.com/sqs/v2/home > Search on {stack}

  SqsInput:
    Properties:
      DelaySeconds: 0
      KmsMasterKeyId: alias/aws/sqs
      MaximumMessageSize: 262144
      MessageRetentionPeriod: 1209600
      QueueName: !Sub "${AWS::StackName}-sqs-input"
      ReceiveMessageWaitTimeSeconds: 0
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - SqsDeadLetter
            - Arn
        maxReceiveCount: 100
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-sqs-input"
      VisibilityTimeout: 300
    Type: AWS::SQS::Queue


  SqsDeadLetter:
    Properties:
      DelaySeconds: 0
      KmsMasterKeyId: alias/aws/sqs
      MaximumMessageSize: 262144
      MessageRetentionPeriod: 1209600
      QueueName: !Sub "${AWS::StackName}-sqs-dead-letter"
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-sqs-queue-dead"
      VisibilityTimeout: 30
    Type: AWS::SQS::Queue


  SqsOutput:
    Properties:
      DelaySeconds: 0
      KmsMasterKeyId: alias/aws/sqs
      MaximumMessageSize: 262144
      MessageRetentionPeriod: 1209600
      QueueName: !Sub "${AWS::StackName}-sqs-output"
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-sqs-output"
      VisibilityTimeout: 300
    Type: AWS::SQS::Queue


  SqsRedoerInput:
    Properties:
      DelaySeconds: 0
      KmsMasterKeyId: alias/aws/sqs
      MaximumMessageSize: 262144
      MessageRetentionPeriod: 1209600
      QueueName: !Sub "${AWS::StackName}-sqs-redoer-input"
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-sqs-redoer-input"
      VisibilityTimeout: 300
    Type: AWS::SQS::Queue


  SqsRedoerOutput:
    Properties:
      DelaySeconds: 0
      KmsMasterKeyId: alias/aws/sqs
      MaximumMessageSize: 262144
      MessageRetentionPeriod: 1209600
      QueueName: !Sub "${AWS::StackName}-sqs-redoer-output"
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-sqs-redoer-output"
      VisibilityTimeout: 300
    Type: AWS::SQS::Queue

# -- ECS Cluster --------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html
# AWS Console: https://console.aws.amazon.com/ecs/home?#/clusters > Search for {stack}

  EcsCluster:
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-cluster"
    Type: AWS::ECS::Cluster

# -- LambdaFunction -----------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html
# AWS Console: https://console.aws.amazon.com/lambda/home?#/functions > Search for {stack}

  LambdaFunctionCognitoCreateUser:
    DependsOn:
     - IamPolicyRoute53
    Properties:
      Code:
        ZipFile: |
          #!/usr/bin/env python3

          import boto3
          import cfnresponse
          import datetime
          import json
          import logging
          import traceback
          from json import JSONEncoder

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          class DateTimeEncoder(JSONEncoder):
              def default(self, obj):
                  if isinstance(obj, (datetime.date, datetime.datetime)):
                      return obj.isoformat()

          def handler(event, context):
              result = cfnresponse.SUCCESS
              response = {}
              try:
                  logger.info("Event: {0}".format(json.dumps(event)))
                  if event['RequestType'] in ['Create', 'Update']:
                      properties = event.get('ResourceProperties', {})
                      user_pool_id = properties.get('UserPoolId', '')
                      username = properties.get('WebUsername', '')
                      password = properties.get('WebPassword', '')

                      # Create Cognito
                      # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cognito-idp.html

                      cognito = boto3.client('cognito-idp')
                      admin_create_user_response = cognito.admin_create_user(
                         UserPoolId=user_pool_id,
                         Username=username,
                         TemporaryPassword=password,
                      )

                      logger.info("admin_create_user_response = {0}".format(admin_create_user_response))
                  logger.info("Response: {0}".format(json.dumps(response, cls=DateTimeEncoder)))

              except Exception as e:
                  logger.error(e)
                  traceback.print_exc()
                  result = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, result, response)

      Description: Create user.
      FunctionName: !Sub "${AWS::StackName}-lambda-cognito-create-user"
      Handler: index.handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.8
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-cognito-create-user"
      Timeout: 30
    Type: AWS::Lambda::Function


  LambdaFunctionFindDomainName:
    DependsOn:
     - IamPolicyRoute53
    Properties:
      Code:
        ZipFile: |
          #!/usr/bin/env python3

          import boto3
          import cfnresponse
          import datetime
          import json
          import logging
          import traceback
          from json import JSONEncoder

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          class DateTimeEncoder(JSONEncoder):
              def default(self, obj):
                  if isinstance(obj, (datetime.date, datetime.datetime)):
                      return obj.isoformat()

          def find_certificate_arn(certificate_domain_name, certificate_list):
              certificate_summary_list = certificate_list.get('CertificateSummaryList', [])
              for certificate_summary in certificate_summary_list:
                  if certificate_summary.get('DomainName') == certificate_domain_name:
                     return certificate_summary.get('CertificateArn')
              return ""

          def handler(event, context):
              result = cfnresponse.SUCCESS
              response = {}
              try:
                  logger.info("Event: {0}".format(json.dumps(event)))
                  if event['RequestType'] in ['Create', 'Update']:
                      properties = event.get('ResourceProperties', {})
                      hosted_zone_id = properties.get('HostedZoneId', {})

                      # Find domain in AWS Route53
                      # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/route53.html

                      route53 = boto3.client('route53')
                      hosted_zone_dict = route53.get_hosted_zone(Id=hosted_zone_id)
                      name = hosted_zone_dict.get("HostedZone", {}).get("Name", " ")
                      response["Name"] = name
                      response["DomainName"] = name[:-1]

                      # Find Certificate in AWS Certificate Manager
                      # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/acm.html

                      certificate_domain_name = "*.{0}".format(response["DomainName"])
                      logger.info("domain_name = {0}".format(certificate_domain_name))

                      acm_client = boto3.client('acm')
                      certificate_list = acm_client.list_certificates()
                      certificate_arn = find_certificate_arn(certificate_domain_name, certificate_list)
                      response["CertificateArn"] = certificate_arn
                      logger.info("certificate_arn = {0}".format(certificate_arn))

                      if not certificate_arn:
                          logger.warning("Cannot find certificate for '{0}'".format(certificate_domain_name))
                          result = cfnresponse.FAILED

                  logger.info("Response: {0}".format(json.dumps(response, cls=DateTimeEncoder)))

              except Exception as e:
                  logger.error(e)
                  traceback.print_exc()
                  result = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, result, response)

      Description: Gets Route53 hosted zone information.
      FunctionName: !Sub "${AWS::StackName}-lambda-find-domain-name"
      Handler: index.handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.8
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-find-domain-name"
      Timeout: 30
    Type: AWS::Lambda::Function


  LambdaFunctionRandomPassword:
    Properties:
      Code:
        ZipFile: |
          #!/usr/bin/env python3

          import cfnresponse
          import json
          import logging
          import random
          import string
          import traceback

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              result = cfnresponse.SUCCESS
              response_data = {}
              try:
                  logger.info("Event: {0}".format(json.dumps(event)))
                  if event['RequestType'] in ['Create', 'Update']:
                      properties = event.get('ResourceProperties', {})
                      length = int(properties.get('Length', 0))
                      char_list = []
                      char_list.extend(random.choices(string.ascii_lowercase, k=1))
                      char_list.extend(random.choices(string.ascii_uppercase, k=1))
                      char_list.extend(random.choices(string.digits, k=1))
                      char_list.extend(random.choices(string.punctuation, k=1))
                      char_list.extend(random.choices(string.ascii_letters + string.digits + string.punctuation, k=length-4))
                      random.shuffle(char_list)
                      response_data["RandomPassword"] = ''.join(char_list)
              except Exception as e:
                  logger.error(e)
                  traceback.print_exc()
                  result = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, result, response_data)

      Description: Generate string of random characters for a password.
      FunctionName: !Sub "${AWS::StackName}-lambda-random-password"
      Handler: index.handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.8
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-random-password"
      Timeout: 600
    Type: AWS::Lambda::Function


  LambdaFunctionRandomString:
    DependsOn:
     - Ec2SubnetRouteTableAssociationPrivate1
     - Ec2SubnetRouteTableAssociationPrivate2
    Properties:
      Code:
        ZipFile: |
          #!/usr/bin/env python3

          import cfnresponse
          import json
          import logging
          import random
          import string
          import traceback

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              result = cfnresponse.SUCCESS
              response_data = {}
              try:
                  logger.info("Event: {0}".format(json.dumps(event)))
                  if event['RequestType'] in ['Create', 'Update']:
                      properties = event.get('ResourceProperties', {})
                      length = int(properties.get('Length', 0))
                      response_data["RandomString"] = ''.join(random.choices(string.ascii_letters + string.digits, k=length))
              except Exception as e:
                  logger.error(e)
                  traceback.print_exc()
                  result = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, result, response_data)

      Description: Generate string of random characters.
      FunctionName: !Sub "${AWS::StackName}-lambda-random-string"
      Handler: index.handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.8
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-random-string"
      Timeout: 600
    Type: AWS::Lambda::Function


  LambdaFunctionRunTask:
    DependsOn:
     - Ec2SubnetRouteTableAssociationPrivate1
     - Ec2SubnetRouteTableAssociationPrivate2
    Properties:
      Code:
        ZipFile: |
          #!/usr/bin/env python3

          import boto3
          import cfnresponse
          import datetime
          import json
          import logging
          import traceback
          from json import JSONEncoder

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          class DateTimeEncoder(JSONEncoder):
              def default(self, obj):
                  if isinstance(obj, (datetime.date, datetime.datetime)):
                      return obj.isoformat()

          def handler(event, context):
              result = cfnresponse.SUCCESS
              response = {}
              try:
                  logger.info("Event: {0}".format(json.dumps(event)))
                  if event['RequestType'] in ['Create', 'Update']:
                      properties = event.get('ResourceProperties', {})
                      run_task_parameters = properties.get('RunTaskParameters', {})

                      # Change strings to integers.

                      numbers = [
                          "count",
                      ]
                      for number in numbers:
                          if number in run_task_parameters:
                              run_task_parameters[number] = int(run_task_parameters[number])

                      # Make AWS ECS request.

                      ecs = boto3.client('ecs')
                      response = ecs.run_task(**run_task_parameters)

                  logger.info("Response: {0}".format(json.dumps(response, cls=DateTimeEncoder)))

              except Exception as e:
                  logger.error(e)
                  traceback.print_exc()
                  result = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, result, {})

      Description: Runs an ECS task.
      FunctionName: !Sub "${AWS::StackName}-lambda-run-task"
      Handler: index.handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.8
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-run-task"
      Timeout: 30
    Type: AWS::Lambda::Function


  LambdaFunctionRunTaskAndWait:
    DependsOn:
     - Ec2SubnetRouteTableAssociationPrivate1
     - Ec2SubnetRouteTableAssociationPrivate2
    Properties:
      Code:
        ZipFile: |
          #!/usr/bin/env python3

          import boto3
          import cfnresponse
          import datetime
          import json
          import logging
          import traceback
          from json import JSONEncoder

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          class DateTimeEncoder(JSONEncoder):
              def default(self, obj):
                  if isinstance(obj, (datetime.date, datetime.datetime)):
                      return obj.isoformat()

          def handler(event, context):
              result = cfnresponse.SUCCESS
              response = {}
              try:
                  logger.info("Event: {0}".format(json.dumps(event)))
                  if event['RequestType'] in ['Create', 'Update']:
                      properties = event.get('ResourceProperties', {})
                      run_task_parameters = properties.get('RunTaskParameters', {})

                      # Change strings to integers.

                      numbers = [
                          "count",
                      ]
                      for number in numbers:
                          if number in run_task_parameters:
                              run_task_parameters[number] = int(run_task_parameters[number])

                      # Make AWS ECS request.
                      # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#ECS.Client.run_task

                      ecs = boto3.client('ecs')
                      response = ecs.run_task(**run_task_parameters)

                      # Wait for completion.
                      # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#waiters

                      waiter = ecs.get_waiter('tasks_stopped')
                      waiter.wait(
                          cluster=properties['ClusterId'],
                          tasks=[response['tasks'][0]['taskArn']],
                      )

                      response['describe_task'] = ecs.describe_tasks(
                          cluster=properties['ClusterId'],
                          tasks=[response['tasks'][0]['taskArn']],
                      )
                      logger.info("describe_task response: {0}".format(json.dumps(response['describe_task'], cls=DateTimeEncoder)))

                      exit_code = response.get('describe_task', {}).get('tasks', [{}])[0].get('containers', [{}])[0].get('exitCode', 99)
                      if exit_code != 0:
                          result = cfnresponse.FAILED
                  logger.info("Response: {0}".format(json.dumps(response, cls=DateTimeEncoder)))

              except Exception as e:
                  logger.error(e)
                  traceback.print_exc()
                  result = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, result, {})

      Description: Runs an ECS task and waits until completion.
      FunctionName: !Sub "${AWS::StackName}-lambda-run-task-and-wait"
      Handler: index.handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.8
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-run-task-and-wait"
      Timeout: 600
    Type: AWS::Lambda::Function


  LambdaFunctionStringToLower:
    Properties:
      Code:
        ZipFile: |
          #!/usr/bin/env python3

          import cfnresponse
          import json
          import logging
          import traceback

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              result = cfnresponse.SUCCESS
              response_data = {}
              try:
                  logger.info("Event: {0}".format(json.dumps(event)))
                  if event['RequestType'] in ['Create', 'Update']:
                      properties = event.get('ResourceProperties', {})
                      input_string = properties.get('InputString', '')
                      response_data["OutputString"] = input_string.lower()
              except Exception as e:
                  logger.error(e)
                  traceback.print_exc()
                  result = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, result, response_data)

      Description: Performs string.lower()
      FunctionName: !Sub "${AWS::StackName}-lambda-string-to-lower"
      Handler: index.handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.8
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-string-to-lower"
    Type: AWS::Lambda::Function


  LambdaFunctionWaitForEfs:
    DependsOn:
     - Ec2SubnetRouteTableAssociationPrivate1
     - Ec2SubnetRouteTableAssociationPrivate2
    Properties:
      Code:
        ZipFile: |
          #!/usr/bin/env python3

          import boto3
          import cfnresponse
          import json
          import logging
          import time
          import traceback

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              result = cfnresponse.SUCCESS
              try:
                  logger.info("Event: {0}".format(json.dumps(event)))
                  if event['RequestType'] in ['Create', 'Update']:
                      properties = event.get('ResourceProperties', {})
                      describe_mount_targets_parameters = properties.get('DescribeMountTargetsParameters', {})
                      efs = boto3.client('efs')
                      done = False
                      while not done:
                          time.sleep(1)
                          response = efs.describe_mount_targets(**describe_mount_targets_parameters)
                          life_cycle_state = response.get("MountTargets",[{}])[0].get("LifeCycleState")
                          logger.info("response = {0}".format(json.dumps(response)))
                          logger.info("life_cycle_state = {0}".format(life_cycle_state))
                          if 'available' == life_cycle_state:
                              done = True
                      logger.info("sleeping 2 minutes")
                      time.sleep(120)
                      logger.info("Done")
              except Exception as e:
                  logger.error(e)
                  traceback.print_exc()
                  result = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, result, {})

      Description: Waits until EFS MountTargets are available.
      FunctionName: !Sub "${AWS::StackName}-lambda-wait-for-efs"
      Handler: index.handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.8
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-wait-for-efs"
      Timeout: 600
    Type: AWS::Lambda::Function

# -- Run ECS tasks-------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cfn-customresource.html
# AWS Console: FIXME:  none?

  LambdaRunnerCognitoCreateUser:
    Properties:
      ClusterId: !Ref EcsCluster
      ServiceToken: !GetAtt LambdaFunctionCognitoCreateUser.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-cognito-create-user"
      UserPoolId: !Ref UserPool
      WebPassword: !GetAtt LambdaRunnerWebPassword.RandomPassword
      WebUsername: !Ref CognitoAdminEmail
    Type: Custom::LambdaRunnerCognitoCreateUser


  LambdaRunnerDbPassword:
    Properties:
      ClusterId: !Ref EcsCluster
      Length: 16
      ServiceToken: !GetAtt LambdaFunctionRandomString.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-db-password"
    Type: Custom::LambdaRunnerDbPassword


  LambdaRunnerFindDomainName:
    Properties:
      ClusterId: !Ref EcsCluster
      HostedZoneId: !Ref Route53HostedZoneId
      ServiceToken: !GetAtt LambdaFunctionFindDomainName.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-find-domain-name"
    Type: Custom::LambdaRunnerFindDomainName


  LambdaRunnerG2ConfigTool:
    DependsOn:
     - LambdaRunnerInitSenzing
    Properties:
      ClusterId: !Ref EcsCluster
      RunTaskParameters:
        # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#ECS.Client.run_task
        cluster: !Ref EcsCluster
        count: 1
        launchType: FARGATE
        networkConfiguration:
          awsvpcConfiguration:
            assignPublicIp: DISABLED
            securityGroups:
              - !Ref Ec2SecurityGroupLambdaRunner
            subnets:
              - !Ref Ec2SubnetPrivate1
              - !Ref Ec2SubnetPrivate2
        platformVersion: 1.4.0
        tags:
          - key: Name
            value: !Sub "${AWS::StackName}-lambda-runner-g2configtool-run-task-parameters"
        taskDefinition: !Ref EcsTaskDefinitionG2ConfigTool
      ServiceToken: !GetAtt LambdaFunctionRunTaskAndWait.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-g2configtool"
    Type: Custom::LambdaRunnerG2ConfigTool


  LambdaRunnerInitEfs:
    DependsOn:
     - LambdaRunnerWaitForEfsMountTarget1
     - LambdaRunnerWaitForEfsMountTarget2
    Properties:
      ClusterId: !Ref EcsCluster
      RunTaskParameters:
        # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#ECS.Client.run_task
        cluster: !Ref EcsCluster
        count: 1
        launchType: FARGATE
        networkConfiguration:
          awsvpcConfiguration:
            assignPublicIp: DISABLED
            securityGroups:
              - !Ref Ec2SecurityGroupLambdaRunner
            subnets:
              - !Ref Ec2SubnetPrivate1
              - !Ref Ec2SubnetPrivate2
        platformVersion: 1.4.0
        tags:
          - key: Name
            value: !Sub "${AWS::StackName}-lambda-runner-init-efs-run-task-parameters"
        taskDefinition: !Ref EcsTaskDefinitionInitEfs
      ServiceToken: !GetAtt LambdaFunctionRunTaskAndWait.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-init-efs"
    Type: Custom::LambdaRunnerInitEfs


  LambdaRunnerInstallSenzing:
    DependsOn:
     - LambdaRunnerInitEfs
    Properties:
      ClusterId: !Ref EcsCluster
      RunTaskParameters:
        # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#ECS.Client.run_task
        cluster: !Ref EcsCluster
        count: 1
        launchType: FARGATE
        networkConfiguration:
          awsvpcConfiguration:
            assignPublicIp: DISABLED
            securityGroups:
              - !Ref Ec2SecurityGroupLambdaRunner
            subnets:
              - !Ref Ec2SubnetPrivate1
              - !Ref Ec2SubnetPrivate2
        platformVersion: 1.4.0
        tags:
          - key: Name
            value: !Sub "${AWS::StackName}-lambda-runner-yum-run-task-parameters"
        taskDefinition: !Ref EcsTaskDefinitionInstallSenzing
      ServiceToken: !GetAtt LambdaFunctionRunTaskAndWait.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-yum"
    Type: Custom::LambdaRunnerInstallSenzing


  LambdaRunnerInitPostgresCore:
    DependsOn:
     - LambdaRunnerInstallSenzing
     - RdsDbClusterCore
    Properties:
      ClusterId: !Ref EcsCluster
      RunTaskParameters:
        # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#ECS.Client.run_task
        cluster: !Ref EcsCluster
        count: 1
        launchType: FARGATE
        networkConfiguration:
          awsvpcConfiguration:
            assignPublicIp: DISABLED
            securityGroups:
              - !Ref Ec2SecurityGroupLambdaRunner
            subnets:
              - !Ref Ec2SubnetPrivate1
              - !Ref Ec2SubnetPrivate2
        platformVersion: 1.4.0
        tags:
          - key: Name
            value: !Sub "${AWS::StackName}-lambda-runner-init-postgres-core-run-task-parameters"
        taskDefinition: !Ref EcsTaskDefinitionInitPostgresCore
      ServiceToken: !GetAtt LambdaFunctionRunTaskAndWait.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-init-postgres-core"
    Type: Custom::LambdaRunnerInitPostgresCore


  LambdaRunnerInitPostgresLibfeat:
    DependsOn:
     - LambdaRunnerInstallSenzing
     - RdsDbClusterLibfeat
    Properties:
      ClusterId: !Ref EcsCluster
      RunTaskParameters:
        # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#ECS.Client.run_task
        cluster: !Ref EcsCluster
        count: 1
        launchType: FARGATE
        networkConfiguration:
          awsvpcConfiguration:
            assignPublicIp: DISABLED
            securityGroups:
              - !Ref Ec2SecurityGroupLambdaRunner
            subnets:
              - !Ref Ec2SubnetPrivate1
              - !Ref Ec2SubnetPrivate2
        platformVersion: 1.4.0
        tags:
          - key: Name
            value: !Sub "${AWS::StackName}-lambda-runner-init-postgres-libfeat-run-task-parameters"
        taskDefinition: !Ref EcsTaskDefinitionInitPostgresLibfeat
      ServiceToken: !GetAtt LambdaFunctionRunTaskAndWait.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-init-postgres-libfeat"
    Type: Custom::LambdaRunnerInitPostgresLibfeat


  LambdaRunnerInitPostgresRes:
    DependsOn:
     - LambdaRunnerInstallSenzing
     - RdsDbClusterRes
    Properties:
      ClusterId: !Ref EcsCluster
      RunTaskParameters:
        # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#ECS.Client.run_task
        cluster: !Ref EcsCluster
        count: 1
        launchType: FARGATE
        networkConfiguration:
          awsvpcConfiguration:
            assignPublicIp: DISABLED
            securityGroups:
              - !Ref Ec2SecurityGroupLambdaRunner
            subnets:
              - !Ref Ec2SubnetPrivate1
              - !Ref Ec2SubnetPrivate2
        platformVersion: 1.4.0
        tags:
          - key: Name
            value: !Sub "${AWS::StackName}-lambda-runner-init-postgres-res-run-task-parameters"
        taskDefinition: !Ref EcsTaskDefinitionInitPostgresRes
      ServiceToken: !GetAtt LambdaFunctionRunTaskAndWait.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-init-postgres-res"
    Type: Custom::LambdaRunnerInitPostgresRes


  LambdaRunnerInitSenzing:
    DependsOn:
     - LambdaRunnerInitPostgresCore
     - LambdaRunnerInitPostgresLibfeat
     - LambdaRunnerInitPostgresRes
    Properties:
      ClusterId: !Ref EcsCluster
      RunTaskParameters:
        # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#ECS.Client.run_task
        cluster: !Ref EcsCluster
        count: 1
        launchType: FARGATE
        networkConfiguration:
          awsvpcConfiguration:
            assignPublicIp: DISABLED
            securityGroups:
              - !Ref Ec2SecurityGroupLambdaRunner
            subnets:
              - !Ref Ec2SubnetPrivate1
              - !Ref Ec2SubnetPrivate2
        platformVersion: 1.4.0
        tags:
          - key: Name
            value: !Sub "${AWS::StackName}-lambda-runner-init-senzing-run-task-parameters"
        taskDefinition: !Ref EcsTaskDefinitionInitSenzing
      ServiceToken: !GetAtt LambdaFunctionRunTaskAndWait.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-init-senzing"
    Type: Custom::LambdaRunnerInitSenzing


  LambdaRunnerSshPassword:
    Properties:
      ClusterId: !Ref EcsCluster
      Length: 16
      ServiceToken: !GetAtt LambdaFunctionRandomString.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-ssh-password"
    Type: Custom::LambdaRunnerSshPassword


  LambdaRunnerStackNameAsLower:
    Properties:
      ClusterId: !Ref EcsCluster
      InputString: !Sub "${AWS::StackName}"
      ServiceToken: !GetAtt LambdaFunctionStringToLower.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-stack-name-as-lower"
    Type: Custom::LambdaRunnerStackNameAsLower


  LambdaRunnerStreamProducer:
    Condition: IfRunStreamProducer
    DependsOn:
     - LambdaRunnerG2ConfigTool
     - LambdaRunnerWaitForEfsMountTarget1
     - LambdaRunnerWaitForEfsMountTarget2
     - SqsInput
    Properties:
      ClusterId: !Ref EcsCluster
      RunTaskParameters:
        # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#ECS.Client.run_task
        cluster: !Ref EcsCluster
        count: 1
        launchType: FARGATE
        networkConfiguration:
          awsvpcConfiguration:
            assignPublicIp: DISABLED
            securityGroups:
              - !Ref Ec2SecurityGroupLambdaRunner
            subnets:
              - !Ref Ec2SubnetPrivate1
              - !Ref Ec2SubnetPrivate2
        platformVersion: 1.4.0
        tags:
          - key: Name
            value: !Sub "${AWS::StackName}-lambda-runner-stream-producer-run-task-parameters"
        taskDefinition: !Ref EcsTaskDefinitionStreamProducer
      ServiceToken: !GetAtt LambdaFunctionRunTask.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-stream-producer"
    Type: Custom::LambdaRunnerStreamProducer


  LambdaRunnerWaitForEfsMountTarget1:
    Properties:
      ClusterId: !Ref EcsCluster
      DescribeMountTargetsParameters:
        MountTargetId: !Ref EfsMountTarget1
      ServiceToken: !GetAtt LambdaFunctionWaitForEfs.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-wait-for-efs-mount-target-1"
    Type: Custom::LambdaRunnerWaitForEfsMountTarget1


  LambdaRunnerWaitForEfsMountTarget2:
    Properties:
      ClusterId: !Ref EcsCluster
      DescribeMountTargetsParameters:
        MountTargetId: !Ref EfsMountTarget2
      ServiceToken: !GetAtt LambdaFunctionWaitForEfs.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-wait-for-efs-mount-target-2"
    Type: Custom::LambdaRunnerWaitForEfsMountTarget2


  LambdaRunnerWebPassword:
    Properties:
      ClusterId: !Ref EcsCluster
      Length: 16
      ServiceToken: !GetAtt LambdaFunctionRandomPassword.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-web-password"
    Type: Custom::LambdaRunnerWebPassword

# -- Load balancing -----------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html
# AWS Console: https://console.aws.amazon.com/ec2/v2/home?#LoadBalancers: > Search for {stack}

  LoadBalancerPrivate:
    Properties:
      Name: !Sub "${AWS::StackName}-alb-private"
      Scheme: internal
      SecurityGroups:
        - !Ref Ec2SecurityGroupLoadBalancerPrivate
      Subnets:
        - !Ref Ec2SubnetPrivate1
        - !Ref Ec2SubnetPrivate2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-alb-private"
      Type: application
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer


  LoadBalancerPublic:
    Properties:
      Name: !Sub "${AWS::StackName}-alb-public"
      Scheme: internet-facing
      SecurityGroups:
        - !Ref Ec2SecurityGroupLoadBalancerPublic
      Subnets:
        - !Ref Ec2SubnetPublic1
        - !Ref Ec2SubnetPublic2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-alb-public"
      Type: application
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html
# AWS Console: https://console.aws.amazon.com/ec2/v2/home?#TargetGroups: > Search for {stack}

  TargetGroupApiServerPrivate:
    Condition: IfRunApiServer
    DependsOn:
     - LoadBalancerPrivate
    Properties:
      HealthCheckIntervalSeconds: 80
      HealthCheckPath: '/api/heartbeat'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 50
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299
      Name: !Sub "${AWS::StackName}-tg-api-private"
      Port: 8250
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-target-group-api-server-private"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
        - Key: slow_start.duration_seconds
          Value: '120'
      TargetType: ip
      UnhealthyThresholdCount: 5
      VpcId: !If
        - IfCreateVpcResources
        - !Ref Ec2Vpc
        - !Ref VpcId
    Type: AWS::ElasticLoadBalancingV2::TargetGroup


  TargetGroupApiServerPublic:
    Condition: IfRunApiServer
    DependsOn:
     - LoadBalancerPublic
    Properties:
      HealthCheckIntervalSeconds: 80
      HealthCheckPath: '/api/heartbeat'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 50
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299
      Name: !Sub "${AWS::StackName}-tg-api-public"
      Port: 8250
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-target-group-api-server-public"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
        - Key: slow_start.duration_seconds
          Value: '120'
      TargetType: ip
      UnhealthyThresholdCount: 5
      VpcId: !If
        - IfCreateVpcResources
        - !Ref Ec2Vpc
        - !Ref VpcId
    Type: AWS::ElasticLoadBalancingV2::TargetGroup


  TargetGroupJupyter:
    Condition: IfRunJupyter
    DependsOn:
     - LoadBalancerPublic
    Properties:
      HealthCheckIntervalSeconds: 80
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 50
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299
      Name: !Sub "${AWS::StackName}-tg-jupyter"
      Port: 8888
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-target-group-jupyter"
      TargetGroupAttributes:
      -
        Key: deregistration_delay.timeout_seconds
        Value: '60'
      -
        Key: stickiness.enabled
        Value: 'true'
      -
        Key: stickiness.type
        Value: lb_cookie
      -
        Key: stickiness.lb_cookie.duration_seconds
        Value: '86400'
      TargetType: ip
      UnhealthyThresholdCount: 5
      VpcId: !If
        - IfCreateVpcResources
        - !Ref Ec2Vpc
        - !Ref VpcId
    Type: AWS::ElasticLoadBalancingV2::TargetGroup


  TargetGroupSwagger:
    Condition: IfRunSwagger
    DependsOn:
     - LoadBalancerPublic
    Properties:
      HealthCheckIntervalSeconds: 80
      HealthCheckPath: '/swagger/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 50
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299
      Name: !Sub "${AWS::StackName}-tg-swagger"
      Port: 8080
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-target-group-swagger"
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '60'
      TargetType: ip
      UnhealthyThresholdCount: 5
      VpcId: !If
        - IfCreateVpcResources
        - !Ref Ec2Vpc
        - !Ref VpcId
    Type: AWS::ElasticLoadBalancingV2::TargetGroup


  TargetGroupWebApp:
    Condition: IfRunWebApp
    DependsOn:
     - LoadBalancerPublic
    Properties:
      HealthCheckIntervalSeconds: 80
      HealthCheckPath: '/app/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 50
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299
      Name: !Sub "${AWS::StackName}-tg-web-app"
      Port: 8251
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-target-group-web-app"
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '60'
      TargetType: ip
      UnhealthyThresholdCount: 5
      VpcId: !If
        - IfCreateVpcResources
        - !Ref Ec2Vpc
        - !Ref VpcId
    Type: AWS::ElasticLoadBalancingV2::TargetGroup


  TargetGroupXterm:
    Condition: IfRunXterm
    DependsOn:
     - LoadBalancerPublic
    Properties:
      HealthCheckIntervalSeconds: 80
      HealthCheckPath: '/xterm/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 50
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299
      Name: !Sub "${AWS::StackName}-tg-xterm"
      Port: 5000
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-target-group-xterm"
      TargetGroupAttributes:
      -
        Key: deregistration_delay.timeout_seconds
        Value: '60'
      -
        Key: stickiness.enabled
        Value: 'true'
      -
        Key: stickiness.type
        Value: lb_cookie
      -
        Key: stickiness.lb_cookie.duration_seconds
        Value: '86400'
      TargetType: ip
      UnhealthyThresholdCount: 5
      VpcId: !If
        - IfCreateVpcResources
        - !Ref Ec2Vpc
        - !Ref VpcId
    Type: AWS::ElasticLoadBalancingV2::TargetGroup

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html
# AWS Console: https://console.aws.amazon.com/ec2/v2/home?#LoadBalancers: > {name} > "Listeners" tab

  ListenerApiServerPrivate:
    Condition: IfRunApiServer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroupApiServerPrivate
          Type: forward
      LoadBalancerArn: !Ref LoadBalancerPrivate
      Port: 8250
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener


  ListenerPort443:
    Properties:
      Certificates:
        - CertificateArn: !GetAtt LambdaRunnerFindDomainName.CertificateArn
      DefaultActions:
        - Order: 1
          RedirectConfig:
            Host: hub.senzing.com
            Path: /aws-cloudformation-ecs-poc-simple/
            Port: '443'
            Protocol: HTTPS
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref LoadBalancerPublic
      Port: 443
      Protocol: HTTPS
    Type: AWS::ElasticLoadBalancingV2::Listener

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenerrule.html
# AWS Console: https://console.aws.amazon.com/ec2/v2/home?#LoadBalancers: > {name} > "Listeners" tab > "View/edit rules"

  ListenerRuleApiServer:
    Condition: IfRunApiServer
    Properties:
      Actions:
        - AuthenticateCognitoConfig:
            OnUnauthenticatedRequest: authenticate
            Scope: openid
            UserPoolArn: !GetAtt 'UserPool.Arn'
            UserPoolClientId: !Ref UserPoolClient
            UserPoolDomain: !Ref UserPoolDomain
          Order: 1
          Type: authenticate-cognito
        -
          Type: "forward"
          TargetGroupArn: !Ref TargetGroupApiServerPublic
          Order: 2
      Conditions:
        -
          Field: "path-pattern"
          Values:
            - "/api/*"
            - "/api"
      ListenerArn: !Ref ListenerPort443
      Priority: 2
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"


  ListenerRuleJupyter:
    Condition: IfRunJupyter
    Properties:
      Actions:
        - AuthenticateCognitoConfig:
            OnUnauthenticatedRequest: authenticate
            Scope: openid
            UserPoolArn: !GetAtt 'UserPool.Arn'
            UserPoolClientId: !Ref UserPoolClient
            UserPoolDomain: !Ref UserPoolDomain
          Order: 1
          Type: authenticate-cognito
        -
          Type: "forward"
          TargetGroupArn: !Ref TargetGroupJupyter
          Order: 2
      Conditions:
        -
          Field: "path-pattern"
          Values:
            - "/jupyter/*"
            - "/jupyter"
      ListenerArn: !Ref ListenerPort443
      Priority: 3
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"


  ListenerRuleSwagger:
    Condition: IfRunSwagger
    Properties:
      Actions:
        - AuthenticateCognitoConfig:
            OnUnauthenticatedRequest: authenticate
            Scope: openid
            UserPoolArn: !GetAtt 'UserPool.Arn'
            UserPoolClientId: !Ref UserPoolClient
            UserPoolDomain: !Ref UserPoolDomain
          Order: 1
          Type: authenticate-cognito
        -
          Order: 2
          TargetGroupArn: !Ref TargetGroupSwagger
          Type: "forward"
      Conditions:
        -
          Field: "path-pattern"
          Values:
            - "/swagger/*"
            - "/swagger"
      ListenerArn: !Ref ListenerPort443
      Priority: 4
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"


  ListenerRuleWebApp:
    Condition: IfRunWebApp
    Properties:
      Actions:
        - AuthenticateCognitoConfig:
            OnUnauthenticatedRequest: authenticate
            Scope: openid
            UserPoolArn: !GetAtt 'UserPool.Arn'
            UserPoolClientId: !Ref UserPoolClient
            UserPoolDomain: !Ref UserPoolDomain
          Order: 1
          Type: authenticate-cognito
        -
          Type: "forward"
          TargetGroupArn: !Ref TargetGroupWebApp
          Order: 2
      Conditions:
        -
          Field: "path-pattern"
          Values:
            - "/app/*"
            - "/app"
      ListenerArn: !Ref ListenerPort443
      Priority: 5
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"


  ListenerRuleXterm:
    Condition: IfRunXterm
    Properties:
      Actions:
        - AuthenticateCognitoConfig:
            OnUnauthenticatedRequest: authenticate
            Scope: openid
            UserPoolArn: !GetAtt 'UserPool.Arn'
            UserPoolClientId: !Ref UserPoolClient
            UserPoolDomain: !Ref UserPoolDomain
          Order: 1
          Type: authenticate-cognito
        -
          Order: 2
          TargetGroupArn: !Ref TargetGroupXterm
          Type: "forward"
      Conditions:
        -
          Field: "path-pattern"
          Values:
            - "/xterm/*"
            - "/xterm"
      ListenerArn: !Ref ListenerPort443
      Priority: 3
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"

# -- Route53RecordSet ---------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-recordset.html
# AWS Console: https://console.aws.amazon.com/route53/v2/hostedzones# > {Domain name} > "Records" tab

  Route53RecordSet:
    Properties:
      AliasTarget:
        DNSName: !Sub
          - "dualstack.${LoadBalancerPublicDNSName}"
          - LoadBalancerPublicDNSName: !GetAtt LoadBalancerPublic.DNSName
        EvaluateTargetHealth: true
        HostedZoneId: !GetAtt LoadBalancerPublic.CanonicalHostedZoneID
      Comment: !Sub "${AWS::StackName} RecordSet"
      HostedZoneId: !Ref Route53HostedZoneId
      Name: !Sub
        - "${StackName}.${DomainName}"
        - StackName: !Ref AWS::StackName
          DomainName: !GetAtt LambdaRunnerFindDomainName.Name
      Type: A
    Type: AWS::Route53::RecordSet

# -- UserPool -----------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpool.html
# AWS Console: https://console.aws.amazon.com/cognito/users/#/pool/u > Search for {stack}

  UserPool:
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
        InviteMessageTemplate:
          EmailMessage: !Sub
            - |
              <html>
              <p>
                  For first-time login to any of the links listed below, use these credentials:
                  <ul>
                      <li><b>Username:</b> {username}</li>
                      <li><b>OneTime Password:</b> {####}</li>
                  </ul>
              </p>
              <p>
                  You will be prompted to change your password.
                  This one-time password is valid for three weeks.
              </p>
              <p>
                  <b>Links:</b>
                  <ol>
                      <li><b><a href="https://github.com/Senzing/entity-search-web-app">Senzing Entity Search web app</a>:</b> https://${Host}/app</li>
                      <br />
                      <li><b><a href="https://github.com/Senzing/senzing-api-server">Senzing API Server</a>:</b> https://${Host}/api/heartbeat</li>
                      <br />
                      <li><b><a href="https://github.com/Senzing/docker-xterm">Senzing XTerm</a>:</b> https://${Host}/xterm</li>
                      <br />
                      <li><b><a href="https://github.com/Senzing/senzing-rest-api-specification">Senzing HTTP REST API</a>:</b> https://${Host}/swagger
                          <ul>
                              <li><b>Servers:</b> <code>{protocol}://{host}:{port}{path}</code></li>
                              <li><b>Server variables</b>:
                                  <ol>
                                      <li><b>protocol:</b> https</li>
                                      <li><b>host:</b> ${Host}</li>
                                      <li><b>port:</b> 443</li>
                                      <li><b>path:</b> /api</li>
                                  </ol>
                              </li>
                          </ul>
                      </li>
                  </ol>
              </p>
              <p>
                  For more information on the
                  <a href="https://github.com/Senzing/aws-cloudformation-ecs-poc-simple">Senzing simple proof-of-concept</a>
                  "${AWS::StackName}"
                  AWS Cloudformation,
                  contact ${Contact}.
              </p>
              </html>
            - Contact: !Ref CognitoAdminEmail
              Host: !GetAtt LoadBalancerPublic.DNSName
          EmailSubject: !Sub 'Information for AWS Cloudformation ${AWS::StackName} stack'
          SMSMessage: 'Use the username {username} and the temporary password {####} to log in for the first time.'
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 16
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 21
      UsernameAttributes:
        - email
      UserPoolName: !Sub "${AWS::StackName}-user-pool"
    Type: AWS::Cognito::UserPool

# -- UserPoolDomain -----------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpooldomain.html
# AWS Console: https://console.aws.amazon.com/cognito/users/#/pool/u > Search for {stack} > "Domain name" tab

  UserPoolDomain: # Provides Cognito Login Page
    Properties:
      Domain: !GetAtt LambdaRunnerStackNameAsLower.OutputString
      UserPoolId: !Ref UserPool
    Type: AWS::Cognito::UserPoolDomain

# -- UserPoolClient -----------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolclient.html
# AWS Console: https://console.aws.amazon.com/cognito/users/#/pool/u > Search for {stack} > "App client settings" tab

  UserPoolClient:
    Properties:
      AllowedOAuthFlows:
        - code # Required for ALB authentication
      AllowedOAuthFlowsUserPoolClient: true # Required for ALB authentication
      AllowedOAuthScopes:
        - openid
      CallbackURLs:
        - !Sub
          - "https://${AWS::StackName}.${DomainName}/oauth2/idpresponse"
          - DomainName: !GetAtt LambdaRunnerFindDomainName.DomainName
      GenerateSecret: true
      SupportedIdentityProviders: # Optional: add providers for identity federation
        - COGNITO
      UserPoolId: !Ref UserPool
    Type: AWS::Cognito::UserPoolClient

# -- EcsTaskDefinition --------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html
# AWS Console: https://console.aws.amazon.com/ecs/home?#/taskDefinitions > Search for {stack}

  EcsTaskDefinitionApiServer:
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: SENZING_API_SERVER_ALLOWED_ORIGINS
              Value: "*"
            -
              Name: SENZING_API_SERVER_BIND_ADDR
              Value: all
            -
              Name: SENZING_API_SERVER_ENABLE_ADMIN
              Value: 'true'
            -
              Name: SENZING_API_SERVER_INI_FILE
              Value: /etc/opt/senzing/G2Module.ini
            -
              Name: SENZING_API_SERVER_PORT
              Value: "8250"
            -
              Name: SENZING_API_SERVER_SKIP_ENGINE_PRIMING
              Value: 'true'
            -
              Name: SENZING_API_SERVER_SKIP_STARTUP_PERF
              Value: 'true'
            -
              Name: SENZING_API_SERVER_URL_BASE_PATH
              Value: /api
          Essential: true
          Image: public.ecr.aws/senzing/senzing-api-server:2.5.0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: service
          MountPoints:
            -
              SourceVolume: senzing-data-version-dir
              ContainerPath: /opt/senzing/data
              ReadOnly: true
            -
              SourceVolume: senzing-etc-dir
              ContainerPath: /etc/opt/senzing
              ReadOnly: true
            -
              SourceVolume: senzing-g2-dir
              ContainerPath: /opt/senzing/g2
              ReadOnly: true
            -
              SourceVolume: senzing-var-dir
              ContainerPath: /var/opt/senzing
              ReadOnly: false
          Name: api-server
          PortMappings:
            - ContainerPort: 8250
              HostPort: 8250
              Protocol: tcp
          Privileged: false
          ReadonlyRootFilesystem: false
      Cpu: '2048'
      ExecutionRoleArn: !GetAtt IamRoleApiServer.Arn
      Family: !Sub "${AWS::StackName}-task-definition-api-server"
      Memory: '16384'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-api-server"
      TaskRoleArn: !GetAtt IamRoleApiServer.Arn
      Volumes:
        -
          Name: senzing-data-version-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /data/2.0.0
        -
          Name: senzing-etc-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /etc
        -
          Name: senzing-g2-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /g2
        -
          Name: senzing-var-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /var
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionG2ConfigTool:
    Properties:
      ContainerDefinitions:
        -
          Command:
            - -f
            - /etc/opt/senzing/G2Config.gtc
          Essential: true
          Image: public.ecr.aws/senzing/g2configtool:1.4.2
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: job
          MountPoints:
            -
              SourceVolume: senzing-data-version-dir
              ContainerPath: /opt/senzing/data
              ReadOnly: true
            -
              SourceVolume: senzing-etc-dir
              ContainerPath: /etc/opt/senzing
              ReadOnly: true
            -
              SourceVolume: senzing-g2-dir
              ContainerPath: /opt/senzing/g2
              ReadOnly: true
          Name: g2configtool
          Privileged: false
          ReadonlyRootFilesystem: false
      Cpu: '1024'
      ExecutionRoleArn: !GetAtt IamRoleG2ConfigTool.Arn
      Family: !Sub "${AWS::StackName}-task-definition-g2configtool"
      Memory: '8192'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-g2configtool"
      Volumes:
        -
          Name: senzing-data-version-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /data/2.0.0
        -
          Name: senzing-etc-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /etc
        -
          Name: senzing-g2-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /g2
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionInitEfs:
    Properties:
      ContainerDefinitions:
        -
          Command:
            - 'mkdir'
            - '/efs/g2'
            - '&&'
            - 'mkdir'
            - '-p'
            - '/efs/data/2.0.0'
            - '&&'
            - 'mkdir'
            - '/efs/etc'
            - '&&'
            - 'mkdir'
            - '-m'
            - '777'
            - '-p'
            - '/efs/var/jupyter'
            - '&&'
            - 'mkdir'
            - '-m'
            - '777'
            - '-p'
            - '/efs/var/shared'
          Essential: true
          Image: public.ecr.aws/senzing/busybox
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: job
          MountPoints:
            -
              SourceVolume: senzing-efs-root
              ContainerPath: /efs
              ReadOnly: false
          Name: efsinitcontainer
          Privileged: false
          ReadonlyRootFilesystem: false
      Cpu: '512'
      ExecutionRoleArn: !GetAtt IamRoleInitEfs.Arn
      Family: !Sub "${AWS::StackName}-task-definition-init-efs"
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-init-efs"
      Volumes:
        -
          Name: senzing-efs-root
          EFSVolumeConfiguration:
            AuthorizationConfig: {}
            FilesystemId:
              Ref: EfsFileSystem
            RootDirectory: '/'
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionInitPostgresCore:
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: SENZING_DATABASE_URL
              Value: !Sub
                - "postgresql://${DatabaseUsername}:${DatabasePassword}@${RdsDbClusterCore.Endpoint.Address}:${RdsDbClusterCore.Endpoint.Port}/${DatabaseName}"
                - DatabaseUsername: !FindInMap [Constants, Database, Username]
                  DatabasePassword: !GetAtt LambdaRunnerDbPassword.RandomString
                  DatabaseName: !FindInMap [Constants, Database, Name]
            -
              Name: SENZING_SQL_FILE
              Value: /opt/senzing/g2/resources/schema/g2core-schema-postgresql-create.sql
          Essential: true
          Image: public.ecr.aws/senzing/postgresql-client:1.0.0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: job
          MountPoints:
            -
              SourceVolume: senzing-g2-dir
              ContainerPath: /opt/senzing/g2
              ReadOnly: true
          Name: postgresinit
          Privileged: false
          ReadonlyRootFilesystem: false
      Cpu: '512'
      ExecutionRoleArn: !GetAtt IamRoleInitPostgres.Arn
      Family: !Sub "${AWS::StackName}-task-definition-init-postgres-core"
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-init-postgres-core"
      Volumes:
        -
          Name: senzing-g2-dir
          EFSVolumeConfiguration:
            AuthorizationConfig: {}
            FilesystemId:
              Ref: EfsFileSystem
            RootDirectory: /g2
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionInitPostgresLibfeat:
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: SENZING_DATABASE_URL
              Value: !Sub
                - "postgresql://${DatabaseUsername}:${DatabasePassword}@${RdsDbClusterLibfeat.Endpoint.Address}:${RdsDbClusterLibfeat.Endpoint.Port}/${DatabaseName}"
                - DatabaseUsername: !FindInMap [Constants, Database, Username]
                  DatabasePassword: !GetAtt LambdaRunnerDbPassword.RandomString
                  DatabaseName: !FindInMap [Constants, Database, Name]
            -
              Name: SENZING_SQL_FILE
              Value: /opt/senzing/g2/resources/schema/g2core-schema-postgresql-create.sql
          Essential: true
          Image: public.ecr.aws/senzing/postgresql-client:1.0.0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: job
          MountPoints:
            -
              SourceVolume: senzing-g2-dir
              ContainerPath: /opt/senzing/g2
              ReadOnly: true
          Name: postgresinit
          Privileged: false
          ReadonlyRootFilesystem: false
      Cpu: '512'
      ExecutionRoleArn: !GetAtt IamRoleInitPostgres.Arn
      Family: !Sub "${AWS::StackName}-task-definition-init-postgres-libfeat"
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-init-postgres-libfeat"
      Volumes:
        -
          Name: senzing-g2-dir
          EFSVolumeConfiguration:
            AuthorizationConfig: {}
            FilesystemId:
              Ref: EfsFileSystem
            RootDirectory: /g2
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionInitPostgresRes:
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: SENZING_DATABASE_URL
              Value: !Sub
                - "postgresql://${DatabaseUsername}:${DatabasePassword}@${RdsDbClusterRes.Endpoint.Address}:${RdsDbClusterRes.Endpoint.Port}/${DatabaseName}"
                - DatabaseUsername: !FindInMap [Constants, Database, Username]
                  DatabasePassword: !GetAtt LambdaRunnerDbPassword.RandomString
                  DatabaseName: !FindInMap [Constants, Database, Name]
            -
              Name: SENZING_SQL_FILE
              Value: /opt/senzing/g2/resources/schema/g2core-schema-postgresql-create.sql
          Essential: true
          Image: public.ecr.aws/senzing/postgresql-client:1.0.0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: job
          MountPoints:
            -
              SourceVolume: senzing-g2-dir
              ContainerPath: /opt/senzing/g2
              ReadOnly: true
          Name: postgresinit
          Privileged: false
          ReadonlyRootFilesystem: false
      Cpu: '512'
      ExecutionRoleArn: !GetAtt IamRoleInitPostgres.Arn
      Family: !Sub "${AWS::StackName}-task-definition-init-postgres-res"
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-init-postgres-res"
      Volumes:
        -
          Name: senzing-g2-dir
          EFSVolumeConfiguration:
            AuthorizationConfig: {}
            FilesystemId:
              Ref: EfsFileSystem
            RootDirectory: /g2
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionInitSenzing:
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: SENZING_ENGINE_CONFIGURATION_JSON
              Value: !GetAtt SsmParameterSenzingEngineConfigurationJson.Value
            -
              Name: SENZING_G2CONFIG_GTC
              Value: |
                addDataSource CUSTOMER
                addDataSource WATCHLIST
                save
            -
              Name: SENZING_LICENSE_BASE64_ENCODED
              Value: !Sub "${SenzingLicenseAsBase64}"
          Essential: true
          Image: public.ecr.aws/senzing/init-container:1.6.9
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: job
          MountPoints:
            -
              SourceVolume: senzing-data-version-dir
              ContainerPath: /opt/senzing/data
              ReadOnly: true
            -
              SourceVolume: senzing-etc-dir
              ContainerPath: /etc/opt/senzing
              ReadOnly: false
            -
              SourceVolume: senzing-g2-dir
              ContainerPath: /opt/senzing/g2
              ReadOnly: false
          Name: initcontainer
          Privileged: false
          ReadonlyRootFilesystem: false
          User: '0'
      Cpu: '512'
      ExecutionRoleArn: !GetAtt IamRoleInitSenzing.Arn
      Family: !Sub "${AWS::StackName}-task-definition-init-senzing"
      Memory: '4096'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-init-efs"
      Volumes:
        -
          Name: senzing-data-version-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /data/2.0.0
        -
          Name: senzing-etc-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /etc
        -
          Name: senzing-g2-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /g2
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionInstallSenzing:
    Properties:
      ContainerDefinitions:
        -
          Command:
            - '-y'
            - 'install'
            - !FindInMap [Constants, Senzing, Version]
          Environment:
            -
              Name: SENZING_ACCEPT_EULA
              Value: !Ref AcceptEula
          Essential: true
          Image: public.ecr.aws/senzing/yum:1.1.4
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: job
          MountPoints:
            -
              SourceVolume: senzing-data-dir
              ContainerPath: /opt/senzing/data
              ReadOnly: false
            -
              SourceVolume: senzing-g2-dir
              ContainerPath: /opt/senzing/g2
              ReadOnly: false

          Name: yum
          Privileged: false
          ReadonlyRootFilesystem: false
          User: '0'
      Cpu: '512'
      ExecutionRoleArn: !GetAtt IamRoleInstallSenzing.Arn
      Family: !Sub "${AWS::StackName}-task-definition-install-senzing"
      Memory: '4096'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-install-senzing"
      Volumes:
        -
          Name: senzing-data-dir
          EFSVolumeConfiguration:
            AuthorizationConfig: {}
            FilesystemId:
              Ref: EfsFileSystem
            RootDirectory: /data
        -
          Name: senzing-g2-dir
          EFSVolumeConfiguration:
            AuthorizationConfig: {}
            FilesystemId:
              Ref: EfsFileSystem
            RootDirectory: /g2
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionJupyter:
    Properties:
      ContainerDefinitions:
        -
          Command:
            - 'start.sh'
            - 'jupyter'
            - 'notebook'
            - "--NotebookApp.token=''"
          Environment:
            -
              Name: SENZING_ENGINE_CONFIGURATION_JSON
              Value: !GetAtt SsmParameterSenzingEngineConfigurationJson.Value
          Essential: true
          Image: public.ecr.aws/senzing/jupyter:1.2.0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: service
          MountPoints:
            -
              SourceVolume: senzing-data-version-dir
              ContainerPath: /opt/senzing/data
              ReadOnly: true
            -
              SourceVolume: senzing-etc-dir
              ContainerPath: /etc/opt/senzing
              ReadOnly: true
            -
              SourceVolume: senzing-g2-dir
              ContainerPath: /opt/senzing/g2
              ReadOnly: true
            -
              SourceVolume: senzing-var-dir
              ContainerPath: /notebooks/shared
              ReadOnly: false
          Name: jupyter
          PortMappings:
            - ContainerPort: 8888
              HostPort: 8888
              Protocol: tcp
          Privileged: false
          ReadonlyRootFilesystem: false
      Cpu: '1024'
      ExecutionRoleArn: !GetAtt IamRoleJupyter.Arn
      Family: !Sub "${AWS::StackName}-task-definition-jupyter"
      Memory: '8192'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-jupyter"
      TaskRoleArn: !GetAtt IamRoleJupyter.Arn
      Volumes:
        -
          Name: senzing-data-version-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /data/2.0.0
        -
          Name: senzing-etc-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /etc
        -
          Name: senzing-g2-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /g2
        -
          Name: senzing-var-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /var/jupyter
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionRedoerLoader:
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: SENZING_ENGINE_CONFIGURATION_JSON
              Value: !GetAtt SsmParameterSenzingEngineConfigurationJson.Value
            -
              Name: SENZING_EXIT_ON_THREAD_TERMINATION
              Value: 'true'
            -
              Name: SENZING_GOVERNOR_CHECK_TIME_INTERVAL_IN_SECONDS
              Value: '600'
            -
              Name: SENZING_LOG_LEVEL
              Value: info
            -
              Name: SENZING_MONITORING_PERIOD_IN_SECONDS
              Value: '600'
            -
              Name: SENZING_REDO_SLEEP_TIME_IN_SECONDS
              Value: '600'
            -
              Name: SENZING_SQS_FAILURE_QUEUE_URL
              Value: !Sub "https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/${SqsDeadLetter.QueueName}"
            -
              Name: SENZING_SQS_INFO_QUEUE_URL
              Value: !Sub "https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/${SqsRedoerOutput.QueueName}"
            -
              Name: SENZING_SQS_REDO_QUEUE_URL
              Value: !Sub "https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/${SqsRedoerInput.QueueName}"
            -
              Name: SENZING_SUBCOMMAND
              Value: read-from-sqs-withinfo
          Essential: true
          Image: public.ecr.aws/senzing/redoer:1.3.5
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: service
          MountPoints:
            -
              SourceVolume: senzing-data-version-dir
              ContainerPath: /opt/senzing/data
              ReadOnly: true
            -
              SourceVolume: senzing-etc-dir
              ContainerPath: /etc/opt/senzing
              ReadOnly: true
            -
              SourceVolume: senzing-g2-dir
              ContainerPath: /opt/senzing/g2
              ReadOnly: true
            -
              SourceVolume: senzing-var-dir
              ContainerPath: /var/opt/senzing
              ReadOnly: false
          Name: redoer-loader
          Privileged: false
          ReadonlyRootFilesystem: false
      Cpu: '4096'
      ExecutionRoleArn: !GetAtt IamRoleRedoer.Arn
      Family: !Sub "${AWS::StackName}-task-definition-redoer-loader"
      Memory: '16384'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-redoer-loader"
      TaskRoleArn: !GetAtt IamRoleRedoer.Arn
      Volumes:
        -
          Name: senzing-data-version-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /data/2.0.0
        -
          Name: senzing-etc-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /etc
        -
          Name: senzing-g2-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /g2
        -
          Name: senzing-var-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /var
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionRedoerProducer:
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: SENZING_ENGINE_CONFIGURATION_JSON
              Value: !GetAtt SsmParameterSenzingEngineConfigurationJson.Value
            -
              Name: SENZING_EXIT_ON_THREAD_TERMINATION
              Value: 'true'
            -
              Name: SENZING_GOVERNOR_CHECK_TIME_INTERVAL_IN_SECONDS
              Value: '600'
            -
              Name: SENZING_LOG_LEVEL
              Value: info
            -
              Name: SENZING_MONITORING_PERIOD_IN_SECONDS
              Value: '600'
            -
              Name: SENZING_REDO_SLEEP_TIME_IN_SECONDS
              Value: '600'
            -
              Name: SENZING_SQS_REDO_QUEUE_URL
              Value: !Sub "https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/${SqsRedoerInput.QueueName}"
            -
              Name: SENZING_SUBCOMMAND
              Value: write-to-sqs
          Essential: true
          Image: public.ecr.aws/senzing/redoer:1.3.5
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: service
          MountPoints:
            -
              SourceVolume: senzing-data-version-dir
              ContainerPath: /opt/senzing/data
              ReadOnly: true
            -
              SourceVolume: senzing-etc-dir
              ContainerPath: /etc/opt/senzing
              ReadOnly: true
            -
              SourceVolume: senzing-g2-dir
              ContainerPath: /opt/senzing/g2
              ReadOnly: true
            -
              SourceVolume: senzing-var-dir
              ContainerPath: /var/opt/senzing
              ReadOnly: false
          Name: redoer-producer
          Privileged: false
          ReadonlyRootFilesystem: false
      Cpu: '4096'
      ExecutionRoleArn: !GetAtt IamRoleRedoer.Arn
      Family: !Sub "${AWS::StackName}-task-definition-redoer-producer"
      Memory: '16384'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-redoer-producer"
      TaskRoleArn: !GetAtt IamRoleRedoer.Arn
      Volumes:
        -
          Name: senzing-data-version-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /data/2.0.0
        -
          Name: senzing-etc-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /etc
        -
          Name: senzing-g2-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /g2
        -
          Name: senzing-var-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /var
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionSshd:
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: ROOT_PASSWORD
              Value: !GetAtt LambdaRunnerSshPassword.RandomString
            -
              Name: SENZING_SKIP_DATABASE_PERFORMANCE_TEST
              Value: 'true'
          Essential: true
          Image: public.ecr.aws/senzing/sshd:1.1.0
          LinuxParameters:
            Capabilities:
              Add:
                - SYS_PTRACE
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: service
          MountPoints:
            -
              SourceVolume: senzing-data-version-dir
              ContainerPath: /opt/senzing/data
              ReadOnly: false
            -
              SourceVolume: senzing-etc-dir
              ContainerPath: /etc/opt/senzing
              ReadOnly: false
            -
              SourceVolume: senzing-g2-dir
              ContainerPath: /opt/senzing/g2
              ReadOnly: false
            -
              SourceVolume: senzing-var-dir
              ContainerPath: /var/opt/senzing
              ReadOnly: false
          Name: sshd
          Privileged: false
          ReadonlyRootFilesystem: false
      Cpu: '1024'
      ExecutionRoleArn: !GetAtt IamRoleSshd.Arn
      Family: !Sub "${AWS::StackName}-task-definition-sshd"
      Memory: '8192'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-sshd"
      Volumes:
        -
          Name: senzing-data-version-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /data/2.0.0
        -
          Name: senzing-etc-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /etc
        -
          Name: senzing-g2-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /g2
        -
          Name: senzing-var-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /var
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionStreamLoader:
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: SENZING_ENGINE_CONFIGURATION_JSON
              Value: !GetAtt SsmParameterSenzingEngineConfigurationJson.Value
            -
              Name: SENZING_DELAY_IN_SECONDS
              Value: '900'
            -
              Name: SENZING_DELAY_RANDOMIZED
              Value: 'true'
            -
              Name: SENZING_GOVERNOR_CHECK_TIME_INTERVAL_IN_SECONDS
              Value: '600'
            -
              Name: SENZING_LOG_LEVEL
              Value: info
            -
              Name: SENZING_MONITORING_PERIOD_IN_SECONDS
              Value: '600'
            -
              Name: SENZING_PRIME_ENGINE
              Value: 'true'
            -
              Name: SENZING_SKIP_DATABASE_PERFORMANCE_TEST
              Value: 'true'
            -
              Name: SENZING_SQS_INFO_QUEUE_URL
              Value: !Sub "https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/${SqsOutput.QueueName}"
            -
              Name: SENZING_SQS_QUEUE_URL
              Value: !Sub "https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/${SqsInput.QueueName}"
            -
              Name: SENZING_SUBCOMMAND
              Value: sqs-withinfo
            -
              Name: SENZING_THREADS_PER_PROCESS
              Value: '8'
          Essential: true
          Image: public.ecr.aws/senzing/stream-loader:1.7.5
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: service
          MountPoints:
            -
              SourceVolume: senzing-data-version-dir
              ContainerPath: /opt/senzing/data
              ReadOnly: true
            -
              SourceVolume: senzing-etc-dir
              ContainerPath: /etc/opt/senzing
              ReadOnly: true
            -
              SourceVolume: senzing-g2-dir
              ContainerPath: /opt/senzing/g2
              ReadOnly: true
            -
              SourceVolume: senzing-var-dir
              ContainerPath: /var/opt/senzing
              ReadOnly: false
          Name: stream-loader
          Privileged: false
          ReadonlyRootFilesystem: false
      Cpu: '1024'
      ExecutionRoleArn: !GetAtt IamRoleStreamLoader.Arn
      Family: !Sub "${AWS::StackName}-task-definition-stream-loader"
      Memory: '8192'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-stream-loader"
      TaskRoleArn: !GetAtt IamRoleStreamLoader.Arn
      Volumes:
        -
          Name: senzing-data-version-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /data/2.0.0
        -
          Name: senzing-etc-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /etc
        -
          Name: senzing-g2-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /g2
        -
          Name: senzing-var-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /var
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionStreamProducer:
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: SENZING_DEFAULT_DATA_SOURCE
              Value: !FindInMap [Constants, StreamProducer, DataSource]
            -
              Name: SENZING_DEFAULT_ENTITY_TYPE
              Value: !FindInMap [Constants, StreamProducer, EntityType]
            -
              Name: SENZING_INPUT_URL
              Value: !Sub "${SenzingInputUrl}"
            -
              Name: SENZING_MONITORING_PERIOD_IN_SECONDS
              Value: '60'
            -
              Name: SENZING_READ_QUEUE_MAXSIZE
              Value: '200'
            -
              Name: SENZING_RECORD_MAX
              Value: !Sub "${SenzingRecordMax}"
            -
              Name: SENZING_RECORD_MIN
              Value: !Sub "${SenzingRecordMin}"
            -
              Name: SENZING_RECORD_MONITOR
              Value: '100000'
            -
              Name: SENZING_SQS_QUEUE_URL
              Value: !Sub "https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/${SqsInput.QueueName}"
            -
              Name: SENZING_SUBCOMMAND
              Value: json-to-sqs
            -
              Name: SENZING_THREADS_PER_PRINT
              Value: '30'
          Essential: true
          Image: public.ecr.aws/senzing/stream-producer:1.4.0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: job
          MountPoints:
            -
              SourceVolume: senzing-var-dir
              ContainerPath: /var/opt/senzing
              ReadOnly: false
          Name: producer
          Privileged: false
          ReadonlyRootFilesystem: false
      Cpu: '1024'
      ExecutionRoleArn: !GetAtt IamRoleStreamProducer.Arn
      Family: !Sub "${AWS::StackName}-task-definition-stream-producer"
      Memory: '8192'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-stream-producer"
      TaskRoleArn: !GetAtt IamRoleStreamProducer.Arn
      Volumes:
        -
          Name: senzing-var-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /var
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionSwagger:
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: BASE_URL
              Value: /swagger
            -
              Name: URL
              Value: "https://raw.githubusercontent.com/Senzing/senzing-rest-api-specification/main/senzing-rest-api.yaml"
          Essential: true
          Image: public.ecr.aws/senzing/swagger-ui:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: service
          Name: swagger
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
          Privileged: false
          ReadonlyRootFilesystem: false
      Cpu: '1024'
      ExecutionRoleArn: !GetAtt IamRoleSwagger.Arn
      Family: !Sub "${AWS::StackName}-task-definition-swagger"
      Memory: '8192'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-swagger"
      TaskRoleArn: !GetAtt IamRoleSwagger.Arn
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionWebApp:
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: SENZING_API_SERVER_URL
              Value: !Sub "http://${LoadBalancerPrivate.DNSName}:8250/api"
            -
              Name: SENZING_WEB_SERVER_PORT
              Value: '8251'
            -
              Name: SENZING_WEB_SERVER_VIRTUAL_PATH
              Value: /app
          Essential: true
          Image: public.ecr.aws/senzing/entity-search-web-app:2.2.3
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: service
          Name: webapp
          PortMappings:
            - ContainerPort: 8251
              HostPort: 8251
              Protocol: tcp
          Privileged: false
          ReadonlyRootFilesystem: false
      Cpu: '1024'
      ExecutionRoleArn: !GetAtt IamRoleWebApp.Arn
      Family: !Sub "${AWS::StackName}-task-definition-webapp"
      Memory: '8192'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-webapp"
      TaskRoleArn: !GetAtt IamRoleWebApp.Arn
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionXterm:
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: SENZING_BASE_URL_XTERM
              Value: /xterm/
            -
              Name: SENZING_SKIP_DATABASE_PERFORMANCE_TEST
              Value: 'true'
          Essential: true
          Image: public.ecr.aws/senzing/xterm:1.1.0
          LinuxParameters:
            Capabilities:
              Add:
                - SYS_PTRACE
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: service
          MountPoints:
            -
              SourceVolume: senzing-data-version-dir
              ContainerPath: /opt/senzing/data
              ReadOnly: true
            -
              SourceVolume: senzing-etc-dir
              ContainerPath: /etc/opt/senzing
              ReadOnly: true
            -
              SourceVolume: senzing-g2-dir
              ContainerPath: /opt/senzing/g2
              ReadOnly: true
            -
              SourceVolume: senzing-var-dir
              ContainerPath: /var/opt/senzing
              ReadOnly: false
          Name: xterm
          PortMappings:
            - ContainerPort: 5000
              HostPort: 5000
              Protocol: tcp
          Privileged: false
          ReadonlyRootFilesystem: false
      Cpu: '1024'
      ExecutionRoleArn: !GetAtt IamRoleXterm.Arn
      Family: !Sub "${AWS::StackName}-task-definition-xterm"
      Memory: '8192'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-xterm"
      Volumes:
        -
          Name: senzing-data-version-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /data/2.0.0
        -
          Name: senzing-etc-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /etc
        -
          Name: senzing-g2-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /g2
        -
          Name: senzing-var-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /var
    Type: AWS::ECS::TaskDefinition

# -- EcsService ---------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html
# AWS Console: https://console.aws.amazon.com/ecs/home?#/clusters > {stack}-cluster > "Services" tab

  EcsServiceApiServer:
    Condition: IfRunApiServer
    DependsOn:
     - LambdaRunnerInitSenzing
     - ListenerPort443
     - ListenerRuleApiServer
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      EnableECSManagedTags: true
      LaunchType: FARGATE
      LoadBalancers:
        -
          ContainerPort: 8250
          ContainerName: api-server
          TargetGroupArn: !Ref TargetGroupApiServerPrivate
        -
          ContainerPort: 8250
          ContainerName: api-server
          TargetGroupArn: !Ref TargetGroupApiServerPublic
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref Ec2SecurityGroupLoadBalancerPrivate
            - !Ref Ec2SecurityGroupLoadBalancerPublic
          Subnets:
            - !Ref Ec2SubnetPrivate1
            - !Ref Ec2SubnetPrivate2
      PlatformVersion: 1.4.0
      PropagateTags: TASK_DEFINITION
      ServiceName: api-server
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-service-api-server"
      TaskDefinition: !Ref EcsTaskDefinitionApiServer
    Type: AWS::ECS::Service


  EcsServiceJupyter:
    Condition: IfRunJupyter
    DependsOn:
     - LambdaRunnerInitSenzing
     - ListenerPort443
     - ListenerRuleJupyter
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      EnableECSManagedTags: true
      LaunchType: FARGATE
      LoadBalancers:
        -
          ContainerName: jupyter
          ContainerPort: 8888
          TargetGroupArn: !Ref TargetGroupJupyter
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref Ec2SecurityGroupLoadBalancerPublic
          Subnets:
            - !Ref Ec2SubnetPrivate1
            - !Ref Ec2SubnetPrivate2
      PlatformVersion: 1.4.0
      PropagateTags: TASK_DEFINITION
      ServiceName: jupyter
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-service-jupyter"
      TaskDefinition: !Ref EcsTaskDefinitionJupyter
    Type: AWS::ECS::Service


  EcsServiceRedoerLoader:
    Condition: IfRunRedoer
    DependsOn:
     - LambdaRunnerInitSenzing
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 2
      EnableECSManagedTags: true
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref Ec2SecurityGroupInternal
          Subnets:
            - !Ref Ec2SubnetPrivate1
            - !Ref Ec2SubnetPrivate2
      PlatformVersion: 1.4.0
      PropagateTags: TASK_DEFINITION
      ServiceName: redoer-loader
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-service-redoer-loader"
      TaskDefinition: !Ref EcsTaskDefinitionRedoerLoader
    Type: AWS::ECS::Service


  EcsServiceRedoerProducer:
    Condition: IfRunRedoer
    DependsOn:
     - LambdaRunnerInitSenzing
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      EnableECSManagedTags: true
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref Ec2SecurityGroupInternal
          Subnets:
            - !Ref Ec2SubnetPrivate1
            - !Ref Ec2SubnetPrivate2
      PlatformVersion: 1.4.0
      PropagateTags: TASK_DEFINITION
      ServiceName: redoer-producer
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-service-redoer-producer"
      TaskDefinition: !Ref EcsTaskDefinitionRedoerProducer
    Type: AWS::ECS::Service


  EcsServiceSshd:
    Condition: IfRunSshd
    DependsOn:
     - LambdaRunnerInitSenzing
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      EnableECSManagedTags: true
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref Ec2SecurityGroupSshd
          Subnets:
            - !Ref Ec2SubnetPublic1
            - !Ref Ec2SubnetPublic2
      PlatformVersion: 1.4.0
      PropagateTags: TASK_DEFINITION
      ServiceName: sshd
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-service-sshd"
      TaskDefinition: !Ref EcsTaskDefinitionSshd
    Type: AWS::ECS::Service


  EcsServiceStreamLoader:
    Condition: IfRunStreamLoader
    DependsOn:
     - LambdaRunnerInitSenzing
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 8
      EnableECSManagedTags: true
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref Ec2SecurityGroupInternal
          Subnets:
            - !Ref Ec2SubnetPrivate1
            - !Ref Ec2SubnetPrivate2
      PlatformVersion: 1.4.0
      PropagateTags: TASK_DEFINITION
      ServiceName: stream-loader
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-service-stream-loader"
      TaskDefinition: !Ref EcsTaskDefinitionStreamLoader
    Type: AWS::ECS::Service


  EcsServiceSwagger:
    Condition: IfRunSwagger
    DependsOn:
     - ListenerPort443
     - ListenerRuleSwagger
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      EnableECSManagedTags: true
      LaunchType: FARGATE
      LoadBalancers:
        -
          ContainerName: swagger
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroupSwagger
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref Ec2SecurityGroupLoadBalancerPublic
          Subnets:
            - !Ref Ec2SubnetPrivate1
            - !Ref Ec2SubnetPrivate2
      PlatformVersion: 1.4.0
      PropagateTags: TASK_DEFINITION
      ServiceName: swagger
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-service-swagger"
      TaskDefinition: !Ref EcsTaskDefinitionSwagger
    Type: AWS::ECS::Service


  EcsServiceWebApp:
    Condition: IfRunWebApp
    DependsOn:
     - ListenerPort443
     - ListenerRuleWebApp
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      EnableECSManagedTags: true
      LaunchType: FARGATE
      LoadBalancers:
        -
          ContainerName: webapp
          ContainerPort: 8251
          TargetGroupArn: !Ref TargetGroupWebApp
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref Ec2SecurityGroupLoadBalancerPublic
          Subnets:
            - !Ref Ec2SubnetPrivate1
            - !Ref Ec2SubnetPrivate2
      PlatformVersion: 1.4.0
      PropagateTags: TASK_DEFINITION
      ServiceName: webapp
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-service-webapp"
      TaskDefinition: !Ref EcsTaskDefinitionWebApp
    Type: AWS::ECS::Service


  EcsServiceXterm:
    Condition: IfRunXterm
    DependsOn:
     - LambdaRunnerInitSenzing
     - ListenerPort443
     - ListenerRuleXterm
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      EnableECSManagedTags: true
      LaunchType: FARGATE
      LoadBalancers:
        -
          ContainerName: xterm
          ContainerPort: 5000
          TargetGroupArn: !Ref TargetGroupXterm
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref Ec2SecurityGroupLoadBalancerPublic
          Subnets:
            - !Ref Ec2SubnetPrivate1
            - !Ref Ec2SubnetPrivate2
      PlatformVersion: 1.4.0
      PropagateTags: TASK_DEFINITION
      ServiceName: xterm
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-service-xterm"
      TaskDefinition: !Ref EcsTaskDefinitionXterm
    Type: AWS::ECS::Service

# -- AutoScaling --------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-applicationautoscaling-scalabletarget.html
# AWS Console: https://console.aws.amazon.com/ecs/home?#/clusters > {stack}-cluster > {Service Name} > "Auto Scaling" tab

  ApplicationAutoScalingScalableTargetApiServer:
    Properties:
      MaxCapacity: 200
      MinCapacity: 1
      ResourceId: !Sub "service/${EcsCluster}/${EcsServiceApiServer.Name}"
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      SuspendedState:
        DynamicScalingInSuspended: false
        DynamicScalingOutSuspended: false
        ScheduledScalingSuspended: false
    Type: AWS::ApplicationAutoScaling::ScalableTarget


  ApplicationAutoScalingScalableTargetRedoerLoader:
    Properties:
      MaxCapacity: 200
      MinCapacity: 1
      ResourceId: !Sub "service/${EcsCluster}/${EcsServiceRedoerLoader.Name}"
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      SuspendedState:
        DynamicScalingInSuspended: false
        DynamicScalingOutSuspended: false
        ScheduledScalingSuspended: false
    Type: AWS::ApplicationAutoScaling::ScalableTarget


  ApplicationAutoScalingScalableTargetStreamLoader:
    Properties:
      MaxCapacity: 200
      MinCapacity: 1
      ResourceId: !Sub "service/${EcsCluster}/${EcsServiceStreamLoader.Name}"
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      SuspendedState:
        DynamicScalingInSuspended: false
        DynamicScalingOutSuspended: false
        ScheduledScalingSuspended: false
    Type: AWS::ApplicationAutoScaling::ScalableTarget


  ApplicationAutoScalingScalableTargetWebApp:
    Properties:
      MaxCapacity: 200
      MinCapacity: 1
      ResourceId: !Sub "service/${EcsCluster}/${EcsServiceWebApp.Name}"
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      SuspendedState:
        DynamicScalingInSuspended: false
        DynamicScalingOutSuspended: false
        ScheduledScalingSuspended: false
    Type: AWS::ApplicationAutoScaling::ScalableTarget

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-applicationautoscaling-scalingpolicy.html
# AWS Console: https://console.aws.amazon.com/ecs/home?#/clusters > {stack}-cluster > {Service Name} > "Auto Scaling" tab

  ApplicationAutoScalingScalingPolicyApiServer:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-scaling-policy-api-server"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ApplicationAutoScalingScalableTargetApiServer
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 1200
        ScaleOutCooldown: 300
        TargetValue: 30
    Type: AWS::ApplicationAutoScaling::ScalingPolicy


  ApplicationAutoScalingScalingPolicyRedoerLoader:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-scaling-policy-redoer-loader"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ApplicationAutoScalingScalableTargetRedoerLoader
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 1200
        ScaleOutCooldown: 300
        TargetValue: 30
    Type: AWS::ApplicationAutoScaling::ScalingPolicy


  ApplicationAutoScalingScalingPolicyStreamLoader:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-scaling-policy-stream-loader"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ApplicationAutoScalingScalableTargetStreamLoader
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 1200
        ScaleOutCooldown: 300
        TargetValue: 30
    Type: AWS::ApplicationAutoScaling::ScalingPolicy


  ApplicationAutoScalingScalingPolicyWebApp:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-scaling-policy-web-app"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ApplicationAutoScalingScalableTargetWebApp
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 1200
        ScaleOutCooldown: 300
        TargetValue: 30
    Type: AWS::ApplicationAutoScaling::ScalingPolicy

# -----------------------------------------------------------------------------
# Outputs
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html
# -----------------------------------------------------------------------------

Outputs:

# AWS Console: https://console.aws.amazon.com/cloudformation/home?#/stacks > {stack} > Outputs

  0penFirst:
    Condition: IfRunWebApp
    Description: 'URL for Senzing Web App. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#0penfirst'
    Export:
      Name: !Sub "${AWS::StackName}-open-first"
    Value: !Sub
      - "https://${AWS::StackName}.${DomainName}/app/"
      - DomainName: !GetAtt LambdaRunnerFindDomainName.DomainName

  AccountID:
    Description: 'The accountID Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#accountid'
    Export:
      Name: !Sub "${AWS::StackName}-account-id"
    Value: !Sub "${AWS::AccountId}"

  CertificateArn:
    Description: 'ARN of the SSL certificate. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#certificatearn'
    Export:
      Name: !Sub "${AWS::StackName}-certificate-arn"
    Value: !GetAtt LambdaRunnerFindDomainName.CertificateArn

  DatabaseHostCore:
    Description: 'The connection endpoint for the DB cluster. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#databasehostcore'
    Export:
      Name: !Sub "${AWS::StackName}-database-host-core"
    Value: !GetAtt RdsDbClusterCore.Endpoint.Address

  DatabaseHostLibfeat:
    Description: 'The connection endpoint for the DB cluster. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#databasehostlibfeat'
    Export:
      Name: !Sub "${AWS::StackName}-database-host-libfeat"
    Value: !GetAtt RdsDbClusterLibfeat.Endpoint.Address

  DatabaseHostRes:
    Description: 'The connection endpoint for the DB cluster. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#databasehostres'
    Export:
      Name: !Sub "${AWS::StackName}-database-host-res"
    Value: !GetAtt RdsDbClusterRes.Endpoint.Address

  DatabaseName:
    Description: 'The name of the database. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#databasename'
    Export:
      Name: !Sub "${AWS::StackName}-database-name"
    Value: !FindInMap [Constants, Database, Name]

  DatabasePassword:
    Description: 'The randomly generated password for the database. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#databasepassword'
    Export:
      Name: !Sub "${AWS::StackName}-database-password"
    Value: !GetAtt LambdaRunnerDbPassword.RandomString

  DatabasePortCore:
    Description: 'The port number that will accept connections on this DB cluster. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#databaseportcore'
    Export:
      Name: !Sub "${AWS::StackName}-database-port-core"
    Value: !GetAtt RdsDbClusterCore.Endpoint.Port

  DatabasePortLibfeat:
    Description: 'The port number that will accept connections on this DB cluster. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#databaseportlibfeat'
    Export:
      Name: !Sub "${AWS::StackName}-database-port-libfeat"
    Value: !GetAtt RdsDbClusterLibfeat.Endpoint.Port

  DatabasePortRes:
    Description: 'The port number that will accept connections on this DB cluster. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#databaseportres'
    Export:
      Name: !Sub "${AWS::StackName}-database-port-res"
    Value: !GetAtt RdsDbClusterRes.Endpoint.Port

  DatabaseUsername:
    Description: 'The administrative user name. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#databaseusername'
    Export:
      Name: !Sub "${AWS::StackName}-database-username"
    Value: !FindInMap [Constants, Database, Username]

  Ec2Vpc:
    Description: 'The ID of the VPC. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#ec2vpc'
    Export:
      Name: !Sub "${AWS::StackName}-ec2-VpcId"
    Value: !If
      - IfCreateVpcResources
      - !Ref Ec2Vpc
      - !Ref VpcId

  Host:
    Description: 'Host name of public services. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#host'
    Export:
      Name: !Sub "${AWS::StackName}-host"
    Value: !Sub "${LoadBalancerPublic.DNSName}"

  QueueDeadLetter:
    Description: 'URL of the dead-letter queue. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#queuedeadletter'
    Export:
      Name: !Sub "${AWS::StackName}-sqs-deadletter"
    Value: !Ref SqsDeadLetter

  QueueInput:
    Description: 'URL of the queue of records to be ingested into Senzing. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#queueinput'
    Export:
      Name: !Sub "${AWS::StackName}-sqs-input"
    Value: !Ref SqsInput

  QueueOutput:
    Description: 'URL of the queue with info records. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#queueoutput'
    Export:
      Name: !Sub "${AWS::StackName}-sqs-output"
    Value: !Ref SqsOutput

  QueueRedoerInput:
    Description: 'URL of the queue holding redo records to be processed. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#queueredoerinput'
    Export:
      Name: !Sub "${AWS::StackName}-sqs-redoer-input"
    Value: !Ref SqsRedoerInput

  QueueRedoerOutput:
    Description: 'URL of the queue with redoer info records. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#queueredoeroutput'
    Export:
      Name: !Sub "${AWS::StackName}-sqs-redoer-output"
    Value: !Ref SqsRedoerOutput

  SenzingVersion:
    Description: 'The Senzing Engine version installed. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#senzingversion'
    Export:
      Name: !Sub "${AWS::StackName}-senzing-version"
    Value: !FindInMap [Constants, Senzing, Version]

  SshPassword:
    Description: 'The randomly generated password for SSH access. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#sshpassword'
    Export:
      Name: !Sub "${AWS::StackName}-ssh-password"
    Value: !GetAtt LambdaRunnerSshPassword.RandomString

  SshUsername:
    Description: 'The username for SSH access. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#sshusername'
    Export:
      Name: !Sub "${AWS::StackName}-ssh-username"
    Value: root

  SubnetPrivate1:
    Description: 'The ID of private subnet 1. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#subnetprivate1'
    Export:
      Name: !Sub "${AWS::StackName}-subnet-private-1"
    Value: !Ref Ec2SubnetPrivate1

  SubnetPrivate2:
    Description: 'The ID of private subnet 2. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#subnetprivate2'
    Export:
      Name: !Sub "${AWS::StackName}-subnet-private-2"
    Value: !Ref Ec2SubnetPrivate2

  SubnetPublic1:
    Description: 'The ID of public subnet 1. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#subnetpublic1'
    Export:
      Name: !Sub "${AWS::StackName}-subnet-public-1"
    Value: !Ref Ec2SubnetPublic1

  SubnetPublic2:
    Description: 'The ID of public subnet 2. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#subnetpublic2'
    Export:
      Name: !Sub "${AWS::StackName}-subnet-public-2"
    Value: !Ref Ec2SubnetPublic2

  UrlApiServer:
    Condition: IfRunApiServer
    Description: "URL for API Server. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#urlapiserver"
    Export:
      Name: !Sub "${AWS::StackName}-url-api-server"
    Value: !Sub
      - "https://${AWS::StackName}.${DomainName}/api/"
      - DomainName: !GetAtt LambdaRunnerFindDomainName.DomainName

  UrlApiServerHeartbeat:
    Condition: IfRunApiServer
    Description: "URL for API Server's heartbeat. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#urlapiserverheartbeat"
    Value: !Sub
      - "https://${AWS::StackName}.${DomainName}/api/heartbeat/"
      - DomainName: !GetAtt LambdaRunnerFindDomainName.DomainName

  UrlJupyter:
    Condition: IfRunJupyter
    Description: 'URL for Jupyter Notebooks. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#urljupyter'
    Export:
      Name: !Sub "${AWS::StackName}-url-jupyter"
    Value: !Sub
      - "https://${AWS::StackName}.${DomainName}/jupyter/"
      - DomainName: !GetAtt LambdaRunnerFindDomainName.DomainName

  UrlSwagger:
    Condition: IfRunSwagger
    Description: 'URL for Swagger. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#urlswagger'
    Export:
      Name: !Sub "${AWS::StackName}-url-swagger"
    Value: !Sub
      - "https://${AWS::StackName}.${DomainName}/swagger/"
      - DomainName: !GetAtt LambdaRunnerFindDomainName.DomainName

  UrlWebApp:
    Condition: IfRunWebApp
    Description: 'URL for Senzing Web App. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#urlwebapp'
    Export:
      Name: !Sub "${AWS::StackName}-url-webapp"
    Value: !Sub
      - "https://${AWS::StackName}.${DomainName}/app/"
      - DomainName: !GetAtt LambdaRunnerFindDomainName.DomainName

  UrlXterm:
    Condition: IfRunXterm
    Description: 'URL for Senzing XTerm. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#urlxterm'
    Export:
      Name: !Sub "${AWS::StackName}-url-xterm"
    Value: !Sub
      - "https://${AWS::StackName}.${DomainName}/xterm/"
      - DomainName: !GetAtt LambdaRunnerFindDomainName.DomainName

  UserInitPassword:
    Description: 'One time password for web access. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#userinitpassword'
    Export:
      Name: !Sub "${AWS::StackName}-user-init-password"
    Value: !GetAtt LambdaRunnerWebPassword.RandomPassword

  UserName:
    Description: 'Username for web access. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#username'
    Export:
      Name: !Sub "${AWS::StackName}-user-name"
    Value: !Ref CognitoAdminEmail

  UserPool:
    Description: 'Username for web access. Help: https://hub.senzing.com/aws-cloudformation-ecs/senzing-demo-user-vpc-hosted-zone/#userpool'
    Export:
      Name: !Sub "${AWS::StackName}-user-pool"
    Value: !Sub "https://console.aws.amazon.com/cognito/users/#/pool/${UserPool}/users"
