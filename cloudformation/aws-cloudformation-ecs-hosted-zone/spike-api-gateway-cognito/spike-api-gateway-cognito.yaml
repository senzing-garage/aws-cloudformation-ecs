AWSTemplateFormatVersion: 2010-09-09

# File format follows https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html

Description: >-
  Senzing aws-cloudformation-ecs/senzing-demo-hosted-zone/spike-api-gateway-cognito Version: 0.1.0
  For more information see https://github.com/Senzing/aws-cloudformation-ecs

# -----------------------------------------------------------------------------
# Metadata
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html
# -----------------------------------------------------------------------------

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Security
        Parameters:
          - CidrInbound
          - Route53HostedZoneId
    ParameterLabels:
      CidrInbound:
        default: 'Required: Allowed inbound connections using CIDR notation.'

# -----------------------------------------------------------------------------
# Parameters
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
# -----------------------------------------------------------------------------

Parameters:

  CidrInbound:
    AllowedPattern: '(?:\d{1,3}\.){3}\d{1,3}(?:/\d\d?)?'
    ConstraintDescription: Inbound CIDR must be in the format n.n.n.n/n
    Default: 0.0.0.0/0
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#cidrinbound'
    Type: String

# -----------------------------------------------------------------------------
# Mappings
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/mappings-section-structure.html
# -----------------------------------------------------------------------------

Mappings:

  Constants:
    Stack:
      Name: spike-api-gateway-cognito
    Run:
      ApiGateway: Yes

  VpcCidrs:
    vpc:
      cidr: 10.0.0.0/16
    pubsubnet1:
      cidr: 10.0.1.0/24
    pubsubnet2:
      cidr: 10.0.2.0/24
    privsubnet1:
      cidr: 10.0.3.0/24
    privsubnet2:
      cidr: 10.0.4.0/24

# -----------------------------------------------------------------------------
# Resources
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
# -----------------------------------------------------------------------------

Resources:

# -- Iam -----------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html

  IamRoleSwagger:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-swagger"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-swagger"
    Type: AWS::IAM::Role

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html

  IamPolicyLoggingCreateStream:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-logging-create-stream"
      PolicyDocument:
        Statement:
          -
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleSwagger
    Type: AWS::IAM::Policy


  IamPolicyTaskRunner:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-task-runner"
      PolicyDocument:
        Statement:
          -
            Action:
              - ecs:DescribeTasks
              - ecs:RunTask
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleSwagger
    Type: AWS::IAM::Policy

# -- Logging ------------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html

  LogsLogGroupMain:
    Properties:
      LogGroupName: !Sub
        - "/senzing/${StackName}/${AWS::StackName}"
        - StackName: !FindInMap [Constants, Stack, Name]
    Type: AWS::Logs::LogGroup

# -- API Gateway --------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-api.html

  MyHTTPApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Description: Example HTTP API Gateway
      ProtocolType: HTTP
      Name: !Sub "${AWS::StackName}-http-api-gateway"

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html

  MyAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref MyHTTPApi
      AuthorizerType: JWT
      IdentitySource:
        - "$request.header.Authorization"
      JwtConfiguration:
        Audience:
          - !Ref UserPoolClient
        Issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}"
      Name: !Sub "${AWS::StackName}-http-api-authorizer"

#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-integration.html

  MyIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MyHTTPApi
      ConnectionId: !Ref MyVpcLink
      Description: HTTP API and ALB private integration
      IntegrationType: HTTP_PROXY
      IntegrationMethod: ANY
      IntegrationUri:
        !Ref ListenerSwaggerHttp
      ConnectionType: VPC_LINK
      ConnectionId:
        !Ref MyVpcLink
      PayloadFormatVersion: 1.0

#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-vpclink.html

  MyVpcLink:
    Type: AWS::ApiGatewayV2::VpcLink
    Properties:
      Name: !Sub "${AWS::StackName}-http-api-vpc-link"
      SecurityGroupIds:
        - !Ref Ec2SecurityGroupLoadBalancerPrivate
      SubnetIds:
        - !Ref Ec2SubnetPrivate1
        - !Ref Ec2SubnetPrivate2

#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-route.html

  MyApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref MyHTTPApi
      RouteKey: "GET /swagger"
      AuthorizerId: !Ref MyAuthorizer
      AuthorizationType: JWT
      Target: !Join
        - /
        - - integrations
          - !Ref MyIntegration

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-stage.html

  HttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref MyHTTPApi
      AutoDeploy: true
      StageName: $default

# -- Cloud, subnets, routing --------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html

  Ec2Vpc:
    Properties:
      CidrBlock: !FindInMap
        - VpcCidrs
        - vpc
        - cidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-vpc"
    Type: AWS::EC2::VPC

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-internetgateway.html

  Ec2InternetGateway:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-internet-gateway"
    Type: AWS::EC2::InternetGateway

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc-gateway-attachment.html

  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Ec2Vpc
      InternetGatewayId: !Ref Ec2InternetGateway

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-eip.html

  Ec2Eip:
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-eip"
    Type: AWS::EC2::EIP

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html

  Ec2NatGateway:
    Properties:
      AllocationId: !GetAtt Ec2Eip.AllocationId
      SubnetId: !Ref Ec2SubnetPublic1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-nat-gateway"
    Type: AWS::EC2::NatGateway

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html

  Ec2SubnetPublic1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref Ec2Vpc
      CidrBlock: !FindInMap
        - VpcCidrs
        - pubsubnet1
        - cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-subnet-public-1"

  Ec2SubnetPrivate1:
    Properties:
      AvailabilityZone: !Select
          - '0'
          - !GetAZs
            Ref: AWS::Region
      CidrBlock: !FindInMap
        - VpcCidrs
        - privsubnet1
        - cidr
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-subnet-public-1"
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::Subnet

  Ec2SubnetPrivate2:
    Properties:
      AvailabilityZone: !Select
          - '1'
          - !GetAZs
            Ref: AWS::Region
      CidrBlock: !FindInMap
        - VpcCidrs
        - privsubnet2
        - cidr
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-subnet-public-2"
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::Subnet

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html

  Ec2SecurityGroupLoadBalancerPrivate:
    Properties:
      GroupDescription: !Sub "${AWS::StackName} - Private load balancer open ports."
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          Description: All
          IpProtocol: '-1'
      SecurityGroupIngress:
        -
          CidrIp: 0.0.0.0/0
          FromPort: 8080
          IpProtocol: tcp
          ToPort: 8080
          Description: swagger gateway
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-security-group-load-balancer-private"
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::SecurityGroup

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html

  Ec2RouteTablePrivate:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-route-table"
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::RouteTable

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html

  Ec2RoutePrivate:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Ec2InternetGateway
      RouteTableId: !Ref Ec2RouteTablePrivate
    Type: AWS::EC2::Route

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-route-table-assoc.html

  Ec2SubnetRouteTableAssociationPrivate1:
    Properties:
      RouteTableId: !Ref Ec2RouteTablePrivate
      SubnetId: !Ref Ec2SubnetPrivate1
    Type: AWS::EC2::SubnetRouteTableAssociation

  Ec2SubnetRouteTableAssociationPrivate2:
    Properties:
      RouteTableId: !Ref Ec2RouteTablePrivate
      SubnetId: !Ref Ec2SubnetPrivate2
    Type: AWS::EC2::SubnetRouteTableAssociation

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html

  LoadBalancerPrivate:
    Properties:
      Name: !Sub "${AWS::StackName}-load-balancer-private"
      Scheme: internal
      SecurityGroups:
        - !Ref Ec2SecurityGroupLoadBalancerPrivate
      Subnets:
        - !Ref Ec2SubnetPrivate1
        - !Ref Ec2SubnetPrivate2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-load-balancer-private"
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html

  TargetGroupSwagger:
    DependsOn:
     - LoadBalancerPrivate
    Properties:
      HealthCheckIntervalSeconds: 80
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 50
      HealthyThresholdCount: 2
      Name: !Sub "${AWS::StackName}-target-group-swagger"
      Matcher:
        HttpCode: 200-299
      Port: 8080
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-target-group-swagger"
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '60'
      TargetType: ip
      UnhealthyThresholdCount: 5
      VpcId: !Ref Ec2Vpc
    Type: AWS::ElasticLoadBalancingV2::TargetGroup

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html

  ListenerSwaggerHttp:
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroupSwagger
          Type: forward
      LoadBalancerArn: !Ref LoadBalancerPrivate
      Port: 8080
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener

# -- Cognito --------------------------------------------------------------

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpool.html

  UserPool:
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 16
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 21
      UsernameAttributes:
        - email
      UserPoolName: !Sub "${AWS::StackName}-user-pool"
    Type: AWS::Cognito::UserPool

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpooldomain.html

  UserPoolDomain: # Provides Cognito Login Page
    Properties:
      Domain: !GetAtt LambdaRunnerStackNameAsLower.OutputString
      UserPoolId: !Ref UserPool
    Type: AWS::Cognito::UserPoolDomain

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolclient.html

  UserPoolClient:
    Properties:
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH # Required for machine to machine auth
        - ALLOW_REFRESH_TOKEN_AUTH
      SupportedIdentityProviders: # Optional: add providers for identity federation
        - COGNITO
      UserPoolId: !Ref UserPool
    Type: AWS::Cognito::UserPoolClient

# -- ECS Cluster --------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html

  EcsCluster:
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-cluster"
    Type: AWS::ECS::Cluster

# -- EcsTaskDefinition --------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html

  EcsTaskDefinitionSwagger:
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: URL
              Value: "https://raw.githubusercontent.com/Senzing/senzing-rest-api-specification/main/senzing-rest-api.yaml"
            -
              Name: BASE_URL
              Value: /swagger
          Essential: true
          Image: public.ecr.aws/senzing/swagger-ui:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: service
          Name: swagger
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
          Privileged: false
          ReadonlyRootFilesystem: false
      Cpu: '1024'
      ExecutionRoleArn: !GetAtt IamRoleSwagger.Arn
      Family: !Sub "${AWS::StackName}-task-definition-swagger"
      Memory: '8192'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-swagger"
      TaskRoleArn: !GetAtt IamRoleSwagger.Arn
    Type: AWS::ECS::TaskDefinition

# -- EcsService ---------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html

  EcsServiceSwagger:
    DependsOn:
      - ListenerSwaggerHttp
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      EnableECSManagedTags: true
      LaunchType: FARGATE
      LoadBalancers:
        -
          ContainerName: swagger
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroupSwagger
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref Ec2SecurityGroupLoadBalancerPrivate
          Subnets:
            - !Ref Ec2SubnetPrivate1
            - !Ref Ec2SubnetPrivate2
      PlatformVersion: 1.4.0
      PropagateTags: TASK_DEFINITION
      ServiceName: swagger
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-service-swagger"
      TaskDefinition: !Ref EcsTaskDefinitionSwagger
    Type: AWS::ECS::Service

# -----------------------------------------------------------------------------
# Outputs
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html
# -----------------------------------------------------------------------------

Outputs:

  Ec2Vpc:
    Description: 'The ID of the VPC. Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#ec2vpc'
    Export:
      Name: !Sub "${AWS::StackName}-ec2-VpcId"
    Value: !Ref Ec2Vpc

  HttpApiGateway:
    Description: 'the http gateway url'
    Export:
      Name: !Sub "${AWS::StackName}-http-api-gateway"
    Value: !Join
      - ""
      - - !GetAtt MyHTTPApi.ApiEndpoint
        - "/swagger"

  ClientId:
    Description: "the cognito app client id"
    Export:
      Name: !Sub "${AWS::StackName}-client-id"
    Value: !Ref UserPoolClient

  PoolId:
    Description: "the cognito user pool id"
    Export:
      Name: !Sub "${AWS::StackName}-pool-id"
    Value: !Ref UserPool
