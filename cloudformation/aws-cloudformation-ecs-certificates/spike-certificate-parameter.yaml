AWSTemplateFormatVersion: 2010-09-09

# File format follows https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html
# Tests:
#     Lint: https://github.com/aws-cloudformation/cfn-python-lint
#     Nag: https://github.com/stelligent/cfn_nag
#     aws cloudformation validate-template: https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudformation/validate-template.html

Description: >-
  Senzing aws-cloudformation-ecs-senzing-demo-spike-certificate-parameter Version: 0.1.0
  For more information see https://github.com/Senzing/aws-cloudformation-ecs

# -----------------------------------------------------------------------------
# Metadata
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html
# -----------------------------------------------------------------------------

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Security
        Parameters:
          - CidrInbound
          - CertificateBody
          - PrivateKey
    ParameterLabels:
      CertificateBody:
        default: 'Certificate body.'
      CidrInbound:
        default: 'Required: Allowed inbound connections using CIDR notation.'
      PrivateKey:
        default: 'Private key.'

# -----------------------------------------------------------------------------
# Parameters
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
# -----------------------------------------------------------------------------

Parameters:

  CertificateBody:
    Type: String
    Description: The body of self signed certificate
    Default: |
      -----BEGIN CERTIFICATE-----
      MIIEHTCCAwWgAwIBAgIDAJojMA0GCSqGSIb3DQEBCwUAMIGLMQswCQYDVQQGEwJV
      UzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzEX
      MBUGA1UECgwOTXlPcmdhbml6YXRpb24xHTAbBgNVBAsMFE15T3JnYW5pemF0aW9u
      YWxVbml0MRcwFQYDVQQDDA5NeSBvd24gUm9vdCBDQTAeFw0yMTAzMTExNTAwNDla
      Fw0zMDAzMDkxNTAwNDlaMIGIMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZv
      cm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzEXMBUGA1UECgwOTXlPcmdhbml6
      YXRpb24xHTAbBgNVBAsMFE15T3JnYW5pemF0aW9uYWxVbml0MRQwEgYDVQQDDAtl
      eGFtcGxlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMnKQhQG
      pRuxcO5RF8VMyAmWe4rs4XWeodVQflYtJVY+mCg/JidmgYe1EYXvE2Qqf1Xzi2O2
      oEJJSAs/s+Wb91yzunnoHVR/5uTHdjN2e6HRhEmUFlJuconjlmBxVKe1LG4Ra8yr
      JA+E0tS2kzrGCLNcFpghQ982GJjuvRWm9nAAsCJPm7N8a/Gm1opMdUkiH1b/3d47
      0wugisz6fYRHQ61UIYfjNUWlg/tV1thGOScAB2RyusQJdTB422BQAlpD4TTX8uj8
      Wd0GhYjpM8DWWpSUOFsoYOHBc3bPr7ctpOoIG8gZcs56zDwZi9CVda4viS/8HPnC
      r8jXaQW1pqwP8ekCAwEAAaOBijCBhzAJBgNVHRMEAjAAMB0GA1UdDgQWBBTaOaPu
      XmtLDTJVv++VYBiQr9gHCTAfBgNVHSMEGDAWgBTaOaPuXmtLDTJVv++VYBiQr9gH
      CTATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCB4AwGAYDVR0RBBEwD4IN
      Ki5leGFtcGxlLmNvbTANBgkqhkiG9w0BAQsFAAOCAQEAWIZu4sma7MmWTXSMwKSP
      stQDWdIvcwthD8ozHkLsNdl5eKqOEndAc0wb7mSk1z8rRkSsd0D0T2zaKyduCYrs
      eBAMhS2+NnHWcXxhn0VOkmXhw5kO8Un14KIptRH0y8FIqHMJ8LrSiK9g9fWCRlI9
      g7eBipu43hzGyMiBP3K0EQ4m49QXlIEwG3OIWak5hdR29h3cD6xXMXaUtlOswsAN
      3PDG/gcjZWZpkwPlaVzwjV8MRsYLmQIYdHPr/qF1FWddYPvK89T0nzpgiuFdBOTY
      W6I1TeTAXFXG2Qf4trXsh5vsFNAisxlRF3mkpixYP5OmVXTOyN7cCOSPOUh6Uctv
      eg==
      -----END CERTIFICATE-----


  CidrInbound:
    AllowedPattern: '(?:\d{1,3}\.){3}\d{1,3}(?:/\d\d?)?'
    ConstraintDescription: Inbound CIDR must be in the format n.n.n.n/n
    Default: 0.0.0.0/0
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs/#cidrinbound'
    Type: String


  PrivateKey:
    Type: String
    Description: Te private key of certificate
    Default: |
      -----BEGIN PRIVATE KEY-----
      MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDJykIUBqUbsXDu
      URfFTMgJlnuK7OF1nqHVUH5WLSVWPpgoPyYnZoGHtRGF7xNkKn9V84tjtqBCSUgL
      P7Plm/dcs7p56B1Uf+bkx3Yzdnuh0YRJlBZSbnKJ45ZgcVSntSxuEWvMqyQPhNLU
      tpM6xgizXBaYIUPfNhiY7r0VpvZwALAiT5uzfGvxptaKTHVJIh9W/93eO9MLoIrM
      +n2ER0OtVCGH4zVFpYP7VdbYRjknAAdkcrrECXUweNtgUAJaQ+E01/Lo/FndBoWI
      6TPA1lqUlDhbKGDhwXN2z6+3LaTqCBvIGXLOesw8GYvQlXWuL4kv/Bz5wq/I12kF
      taasD/HpAgMBAAECggEAKePgBdI/UllqrT6OZboDyOHBcdytDULKK8NTBsbGenny
      EmDRpdpEx4xSP/CaoO+lkY1GgYO3DyuxVgx6Zw8Ssd7ptkb2V8VZhGLX6eUN01Dw
      WmnwnForUu65F/pO7aXRvGPHciyRBtu2/MuOEuRrh/h1BE3bjinnv0/IVwdbH3LW
      pLiJoxzlSJDDomaIAOtB3u6Lw1/6kXiYT9lvXnUpBzR+1uMApTPQN0NJuxLiA0Rs
      es2kBTZ/weEQW+GeJaSYmEXX9zCKGMVCq5EZfS3sH0TrkDENVqW40J+OF3Ee6r12
      CoWLWkC+DPtfHvwh1zp89HFYZ7I6lyycBb31yHb1kQKBgQDuURbpgWxP7XaSgPuI
      6rv2ApjZQav58kNj1K1pRIcnoZsfz3LX3xfft0PKyoKDmndN8nS9KKL9T//XIBaO
      PeD3XzlSvQQ/SvNdaBHqOzkkwldGng3swR3c8RELoaKU9yBdhlMFYXkZsIp5hZgG
      MPVdihamFfUk9J/sdYAr9vjnVQKBgQDYw1TWyBi4UTkMox62hqSUgWw3llaliHkP
      tEinMKF3i0oZzGzWDIHV9YoPPuu2L5cy+j2wLe8r6DWvsKd0dqeNS/yXYj7eIDVz
      fff9SmP25RdtV8h6fkAiLD708G7P0w94G+LhakuVpeTpMNSDPWUk6bl+K81ZRvm6
      DKS7aOM4RQKBgEhQFrG38dO27Fm8BZcgEvStCRAzWym2lzg9mnjssE4YPWfDnMdg
      DHB3vXxVQpEIV9cxELctE3flxG3UcMOshwzIui4e6KED7yCSqYz3d3lt9umYoAUM
      /DDEfTWYUCr/abS3Q43Ia+SdqwcAwIZwaKN/eSvgUchq6fPoG4I7qH8ZAoGBAMRS
      ndtuHZ2Kyw3cC6wrZJKwabAq9M02PtdvZMIwdH3OZU3abdSsPUfo/KL0TQ6UKfBc
      31RbNhzhUwaODAyajwSVhvAhZmlOaLryo5IAN2vdcAtzjzsKb9HDmz3DKcoHEiKp
      tyKMYGrodtyRglhfWeVF3uAckf9DHllYrDalN+61AoGAP9OrCgoDnjtTasFzibZ8
      jb+xYG9E42smB2gep03Jj8l5gqnWTFh0TyA1Z7+RJNvSzkqK8bU/uAH/TgJAqviE
      7XA7a2yuaf/Ww4vToy5bo1HqhQBak1PP2wzuWiUkJcyTRTGryLvnIR9fDonJ9TAd
      0GsjqdfyAqjsvycLNvwR0wk=
      -----END PRIVATE KEY-----

# -----------------------------------------------------------------------------
# Mappings
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/mappings-section-structure.html
# -----------------------------------------------------------------------------

Mappings:

  Constants:
    Stack:
      Name: hosted-zone
  VpcCidrs:
    vpc:
      cidr: 10.0.0.0/16
    pubsubnet1:
      cidr: 10.0.1.0/24
    pubsubnet2:
      cidr: 10.0.2.0/24
    privsubnet1:
      cidr: 10.0.3.0/24
    privsubnet2:
      cidr: 10.0.4.0/24

# -----------------------------------------------------------------------------
# Resources
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
# -----------------------------------------------------------------------------

Resources:

# -- Iam -----------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html

  IamRoleLambda:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
                - lambda.amazonaws.com
                - sqs.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-lambda"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-lambda"
    Type: AWS::IAM::Role


  IamRoleSwagger:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-swagger"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-swagger"
    Type: AWS::IAM::Role

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html

  IamPolicyCertificateManager:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-certificate-manager"
      PolicyDocument:
        Statement:
          -
            Action:
              - acm:ListCertificates
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleLambda
       - !Ref IamRoleSwagger
    Type: AWS::IAM::Policy


  IamPolicyCertificates:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-certificates"
      PolicyDocument:
        Statement:
          -
            Action:
              - iam:UploadServerCertificate
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleLambda
       - !Ref IamRoleSwagger
    Type: AWS::IAM::Policy


  IamPolicyLoggingCreateStream:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-logging-create-stream"
      PolicyDocument:
        Statement:
          -
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleLambda
       - !Ref IamRoleSwagger
    Type: AWS::IAM::Policy


  IamPolicyPassRole:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-pass-role"
      PolicyDocument:
        Statement:
          -
            Action:
              - iam:PassRole
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleLambda
    Type: AWS::IAM::Policy


  IamPolicyTaskRunner:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-task-runner"
      PolicyDocument:
        Statement:
          -
            Action:
              - ecs:DescribeTasks
              - ecs:RunTask
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleLambda
       - !Ref IamRoleSwagger
    Type: AWS::IAM::Policy

# -- Logging ------------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html

  LogsLogGroupMain:
    Properties:
      LogGroupName: !Sub
        - "/senzing/${StackName}/${AWS::StackName}"
        - StackName: !FindInMap [Constants, Stack, Name]
    Type: AWS::Logs::LogGroup

# -- Cloud, subnets, routing --------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html

  Ec2Vpc:
    Properties:
      CidrBlock: !FindInMap
        - VpcCidrs
        - vpc
        - cidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-vpc"
    Type: AWS::EC2::VPC

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html

  Ec2SubnetPublic1:
    Properties:
      AvailabilityZone: !Select
          - '0'
          - !GetAZs
            Ref: AWS::Region
      CidrBlock: !FindInMap
        - VpcCidrs
        - pubsubnet1
        - cidr
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-subnet-public-1"
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::Subnet


  Ec2SubnetPublic2:
    Properties:
      AvailabilityZone: !Select
          - '1'
          - !GetAZs
            Ref: AWS::Region
      CidrBlock: !FindInMap
        - VpcCidrs
        - pubsubnet2
        - cidr
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-subnet-public-2"
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::Subnet

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html

  Ec2SecurityGroupLoadBalancerPublic:
    Properties:
      GroupDescription: !Sub "${AWS::StackName} - Public load balancer open ports."
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          Description: All
          IpProtocol: '-1'
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-security-group-load-balancer-public"
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::SecurityGroup

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group-ingress.html

  Ec2SecurityGroupHttps:
    Properties:
      CidrIp: !Ref CidrInbound
      Description: HTTPS
      FromPort: 443
      GroupId: !Ref Ec2SecurityGroupLoadBalancerPublic
      IpProtocol: tcp
      ToPort: 443
    Type: AWS::EC2::SecurityGroupIngress


  Ec2SecurityGroupIngresSwagger:
    Properties:
      Description: Allow Health Check on Container 8080 from ALB
      FromPort: 8080
      GroupId: !Ref Ec2SecurityGroupLoadBalancerPublic
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt Ec2SecurityGroupLoadBalancerPublic.GroupId
      ToPort: 8080
    Type: AWS::EC2::SecurityGroupIngress

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-internetgateway.html

  Ec2InternetGateway:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-internet-gateway"
    Type: AWS::EC2::InternetGateway

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc-gateway-attachment.html

  Ec2VpcGatewayAttachment:
    Properties:
      InternetGatewayId: !Ref Ec2InternetGateway
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::VPCGatewayAttachment

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html

  Ec2RouteTablePublic:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-route-table-public"
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::RouteTable


  Ec2RouteTablePrivate:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-route-table-private"
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::RouteTable

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html

  Ec2RoutePublic:
    DependsOn:
     - Ec2VpcGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Ec2InternetGateway
      RouteTableId: !Ref Ec2RouteTablePublic
    Type: AWS::EC2::Route

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-route-table-assoc.html

  Ec2SubnetRouteTableAssociationPublic1:
    Properties:
      RouteTableId: !Ref Ec2RouteTablePublic
      SubnetId: !Ref Ec2SubnetPublic1
    Type: AWS::EC2::SubnetRouteTableAssociation


  Ec2SubnetRouteTableAssociationPublic2:
    Properties:
      RouteTableId: !Ref Ec2RouteTablePublic
      SubnetId: !Ref Ec2SubnetPublic2
    Type: AWS::EC2::SubnetRouteTableAssociation

# -- ECS Cluster --------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html

  EcsCluster:
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-cluster"
    Type: AWS::ECS::Cluster

# -- HTTPS support ------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-servercertificate.html

  IamServerCertificate:
    Properties:
      CertificateBody: !Ref CertificateBody
      PrivateKey: !Ref PrivateKey
      ServerCertificateName: !Sub "${AWS::StackName}-certificate"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-certificate"
    Type: AWS::IAM::ServerCertificate

# -- Load balancing -----------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html

  LoadBalancerPublic:
    Properties:
      Name: !Sub "${AWS::StackName}-alb-public"
      Scheme: internet-facing
      SecurityGroups:
        - !Ref Ec2SecurityGroupLoadBalancerPublic
      Subnets:
        - !Ref Ec2SubnetPublic1
        - !Ref Ec2SubnetPublic2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-alb-public"
      Type: application
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html

  TargetGroupSwagger:
    DependsOn:
     - LoadBalancerPublic
    Properties:
      HealthCheckIntervalSeconds: 80
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 50
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299
      Name: !Sub "${AWS::StackName}-tg-swagger"
      Port: 8080
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-tg-swagger"
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '60'
      TargetType: ip
      UnhealthyThresholdCount: 5
      VpcId: !Ref Ec2Vpc
    Type: AWS::ElasticLoadBalancingV2::TargetGroup

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html

  ListenerPort443:
    Properties:
      Certificates:
        - CertificateArn: !GetAtt IamServerCertificate.Arn
      DefaultActions:
        - Order: 1
          RedirectConfig:
            Host: hub.senzing.com
            Path: /aws-cloudformation-ecs-poc-simple/
            Protocol: HTTPS
            Port: '443'
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref LoadBalancerPublic
      Port: 443
      Protocol: HTTPS
    Type: AWS::ElasticLoadBalancingV2::Listener

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenerrule.html

  ListenerRuleSwagger:
    Properties:
      Actions:
        -
          Type: "forward"
          TargetGroupArn: !Ref TargetGroupSwagger
          Order: 1
      Conditions:
        -
          Field: "path-pattern"
          Values:
            - "/swagger/*"
      ListenerArn: !Ref ListenerPort443
      Priority: 4
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"

# -- EcsTaskDefinition --------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html

  EcsTaskDefinitionSwagger:
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: BASE_URL
              Value: /swagger
            -
              Name: URL
              Value: "https://raw.githubusercontent.com/Senzing/senzing-rest-api-specification/main/senzing-rest-api.yaml"
          Essential: true
          Image: public.ecr.aws/senzing/swagger-ui:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: service
          Name: swagger
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
          Privileged: false
          ReadonlyRootFilesystem: false
      Cpu: '1024'
      ExecutionRoleArn: !GetAtt IamRoleSwagger.Arn
      Family: !Sub "${AWS::StackName}-task-definition-swagger"
      Memory: '8192'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-swagger"
      TaskRoleArn: !GetAtt IamRoleSwagger.Arn
    Type: AWS::ECS::TaskDefinition

# -- EcsService ---------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html

  EcsServiceSwagger:
    DependsOn:
     - ListenerPort443
     - ListenerRuleSwagger
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      EnableECSManagedTags: true
      LaunchType: FARGATE
      LoadBalancers:
        -
          ContainerName: swagger
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroupSwagger
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref Ec2SecurityGroupLoadBalancerPublic
          Subnets:
            - !Ref Ec2SubnetPublic1
            - !Ref Ec2SubnetPublic2
      PlatformVersion: 1.4.0
      PropagateTags: TASK_DEFINITION
      ServiceName: swagger
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-service-swagger"
      TaskDefinition: !Ref EcsTaskDefinitionSwagger
    Type: AWS::ECS::Service

# -----------------------------------------------------------------------------
# Outputs
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html
# -----------------------------------------------------------------------------

Outputs:

  AccountID:
    Description: 'The accountID'
    Value: !Sub "${AWS::AccountId}"

  Ec2Vpc:
    Description: 'The ID of the VPC. Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#ec2vpc'
    Export:
      Name: !Sub "${AWS::StackName}-ec2-VpcId"
    Value: !Ref Ec2Vpc

  Host:
    Description: 'Host name of public services. Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#host'
    Export:
      Name: !Sub "${AWS::StackName}-host"
    Value: !GetAtt LoadBalancerPublic.DNSName

  SubnetPublic1:
    Description: 'The ID of public subnet 1. Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#subnetpublic1'
    Export:
      Name: !Sub "${AWS::StackName}-subnet-public-1"
    Value: !Ref Ec2SubnetPublic1

  SubnetPublic2:
    Description: 'The ID of public subnet 2. Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#subnetpublic2'
    Export:
      Name: !Sub "${AWS::StackName}-subnet-public-2"
    Value: !Ref Ec2SubnetPublic2

  UrlSwagger:
    Description: 'HTTPS URL for Swagger. Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#urlswagger'
    Value: !Sub "https://${LoadBalancerPublic.DNSName}/swagger/"
