AWSTemplateFormatVersion: 2010-09-09

# File format follows https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html

Description: >-
  Senzing aws-cloudformation-ecs/senzing-demo-hosted-zone/spike-certificate-with-node Version: 0.1.0
  For more information see https://github.com/senzing-garage/aws-cloudformation-ecs

# -----------------------------------------------------------------------------
# Metadata
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html
# -----------------------------------------------------------------------------

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Security
        Parameters:
          - CidrInbound
    ParameterLabels:
      CidrInbound:
        default: 'Required: Allowed inbound connections using CIDR notation.'

# -----------------------------------------------------------------------------
# Parameters
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
# -----------------------------------------------------------------------------

Parameters:

  CidrInbound:
    AllowedPattern: '(?:\d{1,3}\.){3}\d{1,3}(?:/\d\d?)?'
    ConstraintDescription: Inbound CIDR must be in the format n.n.n.n/n
    Default: 0.0.0.0/0
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#cidrinbound'
    Type: String

# -----------------------------------------------------------------------------
# Mappings
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/mappings-section-structure.html
# -----------------------------------------------------------------------------

Mappings:

  Constants:
    Stack:
      Name: spike-ss-cert

  VpcCidrs:
    vpc:
      cidr: 10.0.0.0/16
    pubsubnet1:
      cidr: 10.0.1.0/24
    pubsubnet2:
      cidr: 10.0.2.0/24
    privsubnet1:
      cidr: 10.0.3.0/24
    privsubnet2:
      cidr: 10.0.4.0/24

# -----------------------------------------------------------------------------
# Resources
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
# -----------------------------------------------------------------------------

Resources:

# -- Iam -----------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html

  IamRoleLambda:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
                - lambda.amazonaws.com
                - sqs.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-lambda"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-lambda"
    Type: AWS::IAM::Role


  IamRoleSwagger:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-swagger"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-swagger"
    Type: AWS::IAM::Role

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html

  IamPolicyLoggingCreateStream:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-logging-create-stream"
      PolicyDocument:
        Statement:
          -
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleLambda
       - !Ref IamRoleSwagger
    Type: AWS::IAM::Policy


  IamPolicyTaskRunner:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-task-runner"
      PolicyDocument:
        Statement:
          -
            Action:
              - ecs:DescribeTasks
              - ecs:RunTask
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleSwagger
    Type: AWS::IAM::Policy

# -- Logging ------------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html

  LogsLogGroupMain:
    Properties:
      LogGroupName: !Sub
        - "/senzing/${StackName}/${AWS::StackName}"
        - StackName: !FindInMap [Constants, Stack, Name]
    Type: AWS::Logs::LogGroup

  LogsLogGroupLambdaGeneratePublicPrivateKeys:
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-lambda-generate-public-private-keys"
    Type: AWS::Logs::LogGroup

# -- Cloud, subnets, routing --------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html

  Ec2Vpc:
    Properties:
      CidrBlock: !FindInMap
        - VpcCidrs
        - vpc
        - cidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-vpc"
    Type: AWS::EC2::VPC

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html

  Ec2SubnetPublic1:
    Properties:
      AvailabilityZone: !Select
          - '0'
          - !GetAZs
            Ref: AWS::Region
      CidrBlock: !FindInMap
        - VpcCidrs
        - pubsubnet1
        - cidr
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-subnet-public-1"
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::Subnet


  Ec2SubnetPublic2:
    Properties:
      AvailabilityZone: !Select
          - '1'
          - !GetAZs
            Ref: AWS::Region
      CidrBlock: !FindInMap
        - VpcCidrs
        - pubsubnet2
        - cidr
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-subnet-public-2"
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::Subnet

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html

  Ec2SecurityGroupLoadBalancerPublic:
    Properties:
      GroupDescription: !Sub "${AWS::StackName} - Public load balancer open ports."
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          Description: All
          IpProtocol: '-1'
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-security-group-load-balancer-public"
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::SecurityGroup

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group-ingress.html

  Ec2SecurityGroupIngresSwagger:
    Properties:
      CidrIp: !Ref CidrInbound
      Description: Swagger UI
      FromPort: 8080
      GroupId: !Ref Ec2SecurityGroupLoadBalancerPublic
      IpProtocol: tcp
      ToPort: 8081
    Type: AWS::EC2::SecurityGroupIngress

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-internetgateway.html

  Ec2InternetGateway:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-internet-gateway"
    Type: AWS::EC2::InternetGateway

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc-gateway-attachment.html

  Ec2VpcGatewayAttachment:
    Properties:
      InternetGatewayId: !Ref Ec2InternetGateway
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::VPCGatewayAttachment

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html

  Ec2RouteTablePublic:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-route-table-public"
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::RouteTable

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html

  Ec2RoutePublic:
    DependsOn:
     - Ec2VpcGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Ec2InternetGateway
      RouteTableId: !Ref Ec2RouteTablePublic
    Type: AWS::EC2::Route

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-route-table-assoc.html

  Ec2SubnetRouteTableAssociationPublic1:
    Properties:
      RouteTableId: !Ref Ec2RouteTablePublic
      SubnetId: !Ref Ec2SubnetPublic1
    Type: AWS::EC2::SubnetRouteTableAssociation


  Ec2SubnetRouteTableAssociationPublic2:
    Properties:
      RouteTableId: !Ref Ec2RouteTablePublic
      SubnetId: !Ref Ec2SubnetPublic2
    Type: AWS::EC2::SubnetRouteTableAssociation

# -- ECS Cluster --------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html

  EcsCluster:
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-cluster"
    Type: AWS::ECS::Cluster

# -- LambdaFunction -----------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html

  LambdaFunctionGeneratePublicPrivateKeys:
    Properties:
      Code:
        ZipFile: |
          var response = require('cfn-response');
          const { generateKeyPairSync } = require('crypto');

          exports.handler = function(event, context) {
              console.log("REQUEST RECEIVED:\n" + JSON.stringify(event));

              var responseStatus = response.FAILED;
              var responseData = {};


              console.log('Generating 1024-bit key-pair...');
              var keys = forge.pki.rsa.generateKeyPair(1024);
              console.log('Key-pair created.');

              // For Delete requests, immediately send a SUCCESS response.

              if (event.RequestType == "Delete") {
                  response.send(event, context, response.SUCCESS);
                  return;
              }

              // https://stackoverflow.com/questions/51942824/nodejs-generate-valid-pem-keys-for-signing-and-verifying-messages

              const { publicKey, privateKey } = generateKeyPairSync('rsa', {
                  modulusLength: 2048,
                  publicKeyEncoding: {
                      type: 'spki',
                      format: 'pem'
                  },
                  privateKeyEncoding: {
                      type: 'pkcs8',
                      format: 'pem',
                      cipher: 'aes-256-cbc',
                  }
              });

              responseData['PublicKey'] = publicKey;
              responseData['PrivateKey'] = privateKey;
              responseStatus = response.SUCCESS;
              response.send(event, context, responseStatus, responseData);
          }

      Description: Generate Public/Private key pair.
      FunctionName: !Sub "${AWS::StackName}-lambda-generate-public-private-keys"
      Handler: index.handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: nodejs12.x
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-generate-public-private-keys"
      Timeout: 600
    Type: AWS::Lambda::Function

# -- Run ECS tasks-------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cfn-customresource.html

  LambdaRunnerGeneratePublicPrivateKeys:
    Properties:
      ClusterId: !Ref EcsCluster
      ServiceToken: !GetAtt LambdaFunctionGeneratePublicPrivateKeys.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-generate-public-private-keys"
    Type: Custom::LambdaRunnerDbPassword

# -----------------------------------------------------------------------------
# Outputs
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html
# -----------------------------------------------------------------------------

Outputs:

  AccountID:
    Description: 'The accountID'
    Value: !Sub "${AWS::AccountId}"

  Ec2Vpc:
    Description: 'The ID of the VPC. Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#ec2vpc'
    Export:
      Name: !Sub "${AWS::StackName}-ec2-VpcId"
    Value: !Ref Ec2Vpc

  SubnetPublic1:
    Description: 'The ID of public subnet 1. Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#subnetpublic1'
    Export:
      Name: !Sub "${AWS::StackName}-subnet-public-1"
    Value: !Ref Ec2SubnetPublic1

  SubnetPublic2:
    Description: 'The ID of public subnet 2. Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#subnetpublic2'
    Export:
      Name: !Sub "${AWS::StackName}-subnet-public-2"
    Value: !Ref Ec2SubnetPublic2

  PublicKey:
    Description: 'Public key used: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#publickey'
    Value: !GetAtt LambdaRunnerGeneratePublicPrivateKeys.PublicKey

  PrivateKey:
    Description: 'Private key used: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#privatekey'
    Value: !GetAtt LambdaRunnerGeneratePublicPrivateKeys.PrivateKey
